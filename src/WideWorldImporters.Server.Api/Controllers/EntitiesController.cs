//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using WideWorldImporters.Server.Database;
using WideWorldImporters.Server.Database.Models;
using Microsoft.AspNetCore.OData.Results;
using WideWorldImporters.Server.Api.Infrastructure.Exceptions;
using WideWorldImporters.Server.Api.Infrastructure.Errors;
using WideWorldImporters.Server.Api.Infrastructure.Logging;

namespace WideWorldImporters.Api.Controllers
{
    public partial class EntitiesController : ODataController
    {
        private readonly ILogger<EntitiesController> _logger;
        private readonly ApplicationErrorHandler _applicationErrorHandler;
        private readonly WideWorldImportersContext _context;
        
        public EntitiesController(ILogger<EntitiesController> logger, ApplicationErrorHandler applicationErrorHandler, WideWorldImportersContext context)
        {
            _logger = logger;
            _applicationErrorHandler = applicationErrorHandler;
            _context = context;
        }

        #region BuyingGroups

        [EnableQuery]
        [HttpGet("odata/BuyingGroups")]
        [HttpGet("odata/BuyingGroups/$count")]
        public IActionResult GetBuyingGroups()
        {
            return Ok(_context.BuyingGroups);
        }

        [EnableQuery]
        [HttpGet("odata/BuyingGroups({key})")]
        public IActionResult GetBuyingGroups(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.BuyingGroups.Where(x => x.BuyingGroupId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(BuyingGroup),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/BuyingGroups")]
        public IActionResult PostBuyingGroup([FromBody]BuyingGroup entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/BuyingGroups({key})")]
        public IActionResult PutBuyingGroup(int key, [FromBody] BuyingGroup entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.BuyingGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(BuyingGroup),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/BuyingGroups({key})")]
        public IActionResult PatchBuyingGroup(int key, Delta<BuyingGroup> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.BuyingGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(BuyingGroup),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/BuyingGroups({key})")]
        public IActionResult DeleteBuyingGroup(int key)
        {
            var original = _context.BuyingGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(BuyingGroup),
                    EntityId = key
                };
            }

            _context.BuyingGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion BuyingGroups

        #region Cities

        [EnableQuery]
        [HttpGet("odata/Cities")]
        [HttpGet("odata/Cities/$count")]
        public IActionResult GetCities()
        {
            return Ok(_context.Cities);
        }

        [EnableQuery]
        [HttpGet("odata/Cities({key})")]
        public IActionResult GetCities(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Cities.Where(x => x.CityId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(City),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Cities")]
        public IActionResult PostCity([FromBody]City entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Cities({key})")]
        public IActionResult PutCity(int key, [FromBody] City entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Cities.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(City),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Cities({key})")]
        public IActionResult PatchCity(int key, Delta<City> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Cities.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(City),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Cities({key})")]
        public IActionResult DeleteCity(int key)
        {
            var original = _context.Cities.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(City),
                    EntityId = key
                };
            }

            _context.Cities.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Cities

        #region ColdRoomTemperatures

        [EnableQuery]
        [HttpGet("odata/ColdRoomTemperatures")]
        [HttpGet("odata/ColdRoomTemperatures/$count")]
        public IActionResult GetColdRoomTemperatures()
        {
            return Ok(_context.ColdRoomTemperatures);
        }

        [EnableQuery]
        [HttpGet("odata/ColdRoomTemperatures({key})")]
        public IActionResult GetColdRoomTemperatures(long key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.ColdRoomTemperatures.Where(x => x.ColdRoomTemperatureId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(ColdRoomTemperature),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/ColdRoomTemperatures")]
        public IActionResult PostColdRoomTemperature([FromBody]ColdRoomTemperature entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/ColdRoomTemperatures({key})")]
        public IActionResult PutColdRoomTemperature(long key, [FromBody] ColdRoomTemperature entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.ColdRoomTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(ColdRoomTemperature),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/ColdRoomTemperatures({key})")]
        public IActionResult PatchColdRoomTemperature(long key, Delta<ColdRoomTemperature> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.ColdRoomTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(ColdRoomTemperature),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/ColdRoomTemperatures({key})")]
        public IActionResult DeleteColdRoomTemperature(long key)
        {
            var original = _context.ColdRoomTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(ColdRoomTemperature),
                    EntityId = key
                };
            }

            _context.ColdRoomTemperatures.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion ColdRoomTemperatures

        #region Colors

        [EnableQuery]
        [HttpGet("odata/Colors")]
        [HttpGet("odata/Colors/$count")]
        public IActionResult GetColors()
        {
            return Ok(_context.Colors);
        }

        [EnableQuery]
        [HttpGet("odata/Colors({key})")]
        public IActionResult GetColors(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Colors.Where(x => x.ColorId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Color),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Colors")]
        public IActionResult PostColor([FromBody]Color entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Colors({key})")]
        public IActionResult PutColor(int key, [FromBody] Color entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Colors.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Color),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Colors({key})")]
        public IActionResult PatchColor(int key, Delta<Color> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Colors.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Color),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Colors({key})")]
        public IActionResult DeleteColor(int key)
        {
            var original = _context.Colors.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Color),
                    EntityId = key
                };
            }

            _context.Colors.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Colors

        #region Countries

        [EnableQuery]
        [HttpGet("odata/Countries")]
        [HttpGet("odata/Countries/$count")]
        public IActionResult GetCountries()
        {
            return Ok(_context.Countries);
        }

        [EnableQuery]
        [HttpGet("odata/Countries({key})")]
        public IActionResult GetCountries(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Countries.Where(x => x.CountryId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Country),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Countries")]
        public IActionResult PostCountry([FromBody]Country entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Countries({key})")]
        public IActionResult PutCountry(int key, [FromBody] Country entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Countries.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Country),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Countries({key})")]
        public IActionResult PatchCountry(int key, Delta<Country> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Countries.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Country),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Countries({key})")]
        public IActionResult DeleteCountry(int key)
        {
            var original = _context.Countries.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Country),
                    EntityId = key
                };
            }

            _context.Countries.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Countries

        #region Customers

        [EnableQuery]
        [HttpGet("odata/Customers")]
        [HttpGet("odata/Customers/$count")]
        public IActionResult GetCustomers()
        {
            return Ok(_context.Customers);
        }

        [EnableQuery]
        [HttpGet("odata/Customers({key})")]
        public IActionResult GetCustomers(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Customers.Where(x => x.CustomerId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Customer),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Customers")]
        public IActionResult PostCustomer([FromBody]Customer entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Customers({key})")]
        public IActionResult PutCustomer(int key, [FromBody] Customer entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Customers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Customer),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Customers({key})")]
        public IActionResult PatchCustomer(int key, Delta<Customer> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Customers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Customer),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Customers({key})")]
        public IActionResult DeleteCustomer(int key)
        {
            var original = _context.Customers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Customer),
                    EntityId = key
                };
            }

            _context.Customers.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Customers

        #region CustomerCategories

        [EnableQuery]
        [HttpGet("odata/CustomerCategories")]
        [HttpGet("odata/CustomerCategories/$count")]
        public IActionResult GetCustomerCategories()
        {
            return Ok(_context.CustomerCategories);
        }

        [EnableQuery]
        [HttpGet("odata/CustomerCategories({key})")]
        public IActionResult GetCustomerCategories(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.CustomerCategories.Where(x => x.CustomerCategoryId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(CustomerCategory),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/CustomerCategories")]
        public IActionResult PostCustomerCategory([FromBody]CustomerCategory entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/CustomerCategories({key})")]
        public IActionResult PutCustomerCategory(int key, [FromBody] CustomerCategory entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.CustomerCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(CustomerCategory),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/CustomerCategories({key})")]
        public IActionResult PatchCustomerCategory(int key, Delta<CustomerCategory> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.CustomerCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(CustomerCategory),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/CustomerCategories({key})")]
        public IActionResult DeleteCustomerCategory(int key)
        {
            var original = _context.CustomerCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(CustomerCategory),
                    EntityId = key
                };
            }

            _context.CustomerCategories.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion CustomerCategories

        #region CustomerTransactions

        [EnableQuery]
        [HttpGet("odata/CustomerTransactions")]
        [HttpGet("odata/CustomerTransactions/$count")]
        public IActionResult GetCustomerTransactions()
        {
            return Ok(_context.CustomerTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/CustomerTransactions({key})")]
        public IActionResult GetCustomerTransactions(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.CustomerTransactions.Where(x => x.CustomerTransactionId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(CustomerTransaction),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/CustomerTransactions")]
        public IActionResult PostCustomerTransaction([FromBody]CustomerTransaction entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/CustomerTransactions({key})")]
        public IActionResult PutCustomerTransaction(int key, [FromBody] CustomerTransaction entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.CustomerTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(CustomerTransaction),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/CustomerTransactions({key})")]
        public IActionResult PatchCustomerTransaction(int key, Delta<CustomerTransaction> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.CustomerTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(CustomerTransaction),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/CustomerTransactions({key})")]
        public IActionResult DeleteCustomerTransaction(int key)
        {
            var original = _context.CustomerTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(CustomerTransaction),
                    EntityId = key
                };
            }

            _context.CustomerTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion CustomerTransactions

        #region DeliveryMethods

        [EnableQuery]
        [HttpGet("odata/DeliveryMethods")]
        [HttpGet("odata/DeliveryMethods/$count")]
        public IActionResult GetDeliveryMethods()
        {
            return Ok(_context.DeliveryMethods);
        }

        [EnableQuery]
        [HttpGet("odata/DeliveryMethods({key})")]
        public IActionResult GetDeliveryMethods(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.DeliveryMethods.Where(x => x.DeliveryMethodId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(DeliveryMethod),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/DeliveryMethods")]
        public IActionResult PostDeliveryMethod([FromBody]DeliveryMethod entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/DeliveryMethods({key})")]
        public IActionResult PutDeliveryMethod(int key, [FromBody] DeliveryMethod entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.DeliveryMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(DeliveryMethod),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/DeliveryMethods({key})")]
        public IActionResult PatchDeliveryMethod(int key, Delta<DeliveryMethod> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.DeliveryMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(DeliveryMethod),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/DeliveryMethods({key})")]
        public IActionResult DeleteDeliveryMethod(int key)
        {
            var original = _context.DeliveryMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(DeliveryMethod),
                    EntityId = key
                };
            }

            _context.DeliveryMethods.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion DeliveryMethods

        #region Invoices

        [EnableQuery]
        [HttpGet("odata/Invoices")]
        [HttpGet("odata/Invoices/$count")]
        public IActionResult GetInvoices()
        {
            return Ok(_context.Invoices);
        }

        [EnableQuery]
        [HttpGet("odata/Invoices({key})")]
        public IActionResult GetInvoices(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Invoices.Where(x => x.InvoiceId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Invoice),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Invoices")]
        public IActionResult PostInvoice([FromBody]Invoice entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Invoices({key})")]
        public IActionResult PutInvoice(int key, [FromBody] Invoice entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Invoices.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Invoice),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Invoices({key})")]
        public IActionResult PatchInvoice(int key, Delta<Invoice> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Invoices.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Invoice),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Invoices({key})")]
        public IActionResult DeleteInvoice(int key)
        {
            var original = _context.Invoices.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Invoice),
                    EntityId = key
                };
            }

            _context.Invoices.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Invoices

        #region InvoiceLines

        [EnableQuery]
        [HttpGet("odata/InvoiceLines")]
        [HttpGet("odata/InvoiceLines/$count")]
        public IActionResult GetInvoiceLines()
        {
            return Ok(_context.InvoiceLines);
        }

        [EnableQuery]
        [HttpGet("odata/InvoiceLines({key})")]
        public IActionResult GetInvoiceLines(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.InvoiceLines.Where(x => x.InvoiceLineId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(InvoiceLine),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/InvoiceLines")]
        public IActionResult PostInvoiceLine([FromBody]InvoiceLine entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/InvoiceLines({key})")]
        public IActionResult PutInvoiceLine(int key, [FromBody] InvoiceLine entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.InvoiceLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(InvoiceLine),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/InvoiceLines({key})")]
        public IActionResult PatchInvoiceLine(int key, Delta<InvoiceLine> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.InvoiceLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(InvoiceLine),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/InvoiceLines({key})")]
        public IActionResult DeleteInvoiceLine(int key)
        {
            var original = _context.InvoiceLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(InvoiceLine),
                    EntityId = key
                };
            }

            _context.InvoiceLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion InvoiceLines

        #region Orders

        [EnableQuery]
        [HttpGet("odata/Orders")]
        [HttpGet("odata/Orders/$count")]
        public IActionResult GetOrders()
        {
            return Ok(_context.Orders);
        }

        [EnableQuery]
        [HttpGet("odata/Orders({key})")]
        public IActionResult GetOrders(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Orders.Where(x => x.OrderId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Order),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Orders")]
        public IActionResult PostOrder([FromBody]Order entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Orders({key})")]
        public IActionResult PutOrder(int key, [FromBody] Order entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Orders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Order),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Orders({key})")]
        public IActionResult PatchOrder(int key, Delta<Order> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Orders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Order),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Orders({key})")]
        public IActionResult DeleteOrder(int key)
        {
            var original = _context.Orders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Order),
                    EntityId = key
                };
            }

            _context.Orders.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Orders

        #region OrderLines

        [EnableQuery]
        [HttpGet("odata/OrderLines")]
        [HttpGet("odata/OrderLines/$count")]
        public IActionResult GetOrderLines()
        {
            return Ok(_context.OrderLines);
        }

        [EnableQuery]
        [HttpGet("odata/OrderLines({key})")]
        public IActionResult GetOrderLines(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.OrderLines.Where(x => x.OrderLineId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(OrderLine),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/OrderLines")]
        public IActionResult PostOrderLine([FromBody]OrderLine entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/OrderLines({key})")]
        public IActionResult PutOrderLine(int key, [FromBody] OrderLine entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.OrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(OrderLine),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/OrderLines({key})")]
        public IActionResult PatchOrderLine(int key, Delta<OrderLine> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.OrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(OrderLine),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/OrderLines({key})")]
        public IActionResult DeleteOrderLine(int key)
        {
            var original = _context.OrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(OrderLine),
                    EntityId = key
                };
            }

            _context.OrderLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion OrderLines

        #region PackageTypes

        [EnableQuery]
        [HttpGet("odata/PackageTypes")]
        [HttpGet("odata/PackageTypes/$count")]
        public IActionResult GetPackageTypes()
        {
            return Ok(_context.PackageTypes);
        }

        [EnableQuery]
        [HttpGet("odata/PackageTypes({key})")]
        public IActionResult GetPackageTypes(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.PackageTypes.Where(x => x.PackageTypeId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PackageType),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/PackageTypes")]
        public IActionResult PostPackageType([FromBody]PackageType entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PackageTypes({key})")]
        public IActionResult PutPackageType(int key, [FromBody] PackageType entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PackageTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PackageType),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/PackageTypes({key})")]
        public IActionResult PatchPackageType(int key, Delta<PackageType> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PackageTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PackageType),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PackageTypes({key})")]
        public IActionResult DeletePackageType(int key)
        {
            var original = _context.PackageTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PackageType),
                    EntityId = key
                };
            }

            _context.PackageTypes.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PackageTypes

        #region PaymentMethods

        [EnableQuery]
        [HttpGet("odata/PaymentMethods")]
        [HttpGet("odata/PaymentMethods/$count")]
        public IActionResult GetPaymentMethods()
        {
            return Ok(_context.PaymentMethods);
        }

        [EnableQuery]
        [HttpGet("odata/PaymentMethods({key})")]
        public IActionResult GetPaymentMethods(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.PaymentMethods.Where(x => x.PaymentMethodId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PaymentMethod),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/PaymentMethods")]
        public IActionResult PostPaymentMethod([FromBody]PaymentMethod entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PaymentMethods({key})")]
        public IActionResult PutPaymentMethod(int key, [FromBody] PaymentMethod entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PaymentMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PaymentMethod),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/PaymentMethods({key})")]
        public IActionResult PatchPaymentMethod(int key, Delta<PaymentMethod> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PaymentMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PaymentMethod),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PaymentMethods({key})")]
        public IActionResult DeletePaymentMethod(int key)
        {
            var original = _context.PaymentMethods.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PaymentMethod),
                    EntityId = key
                };
            }

            _context.PaymentMethods.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PaymentMethods

        #region People

        [EnableQuery]
        [HttpGet("odata/People")]
        [HttpGet("odata/People/$count")]
        public IActionResult GetPeople()
        {
            return Ok(_context.People);
        }

        [EnableQuery]
        [HttpGet("odata/People({key})")]
        public IActionResult GetPeople(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.People.Where(x => x.PersonId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Person),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/People")]
        public IActionResult PostPerson([FromBody]Person entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/People({key})")]
        public IActionResult PutPerson(int key, [FromBody] Person entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.People.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Person),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/People({key})")]
        public IActionResult PatchPerson(int key, Delta<Person> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.People.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Person),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/People({key})")]
        public IActionResult DeletePerson(int key)
        {
            var original = _context.People.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Person),
                    EntityId = key
                };
            }

            _context.People.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion People

        #region PurchaseOrders

        [EnableQuery]
        [HttpGet("odata/PurchaseOrders")]
        [HttpGet("odata/PurchaseOrders/$count")]
        public IActionResult GetPurchaseOrders()
        {
            return Ok(_context.PurchaseOrders);
        }

        [EnableQuery]
        [HttpGet("odata/PurchaseOrders({key})")]
        public IActionResult GetPurchaseOrders(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.PurchaseOrders.Where(x => x.PurchaseOrderId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PurchaseOrder),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/PurchaseOrders")]
        public IActionResult PostPurchaseOrder([FromBody]PurchaseOrder entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PurchaseOrders({key})")]
        public IActionResult PutPurchaseOrder(int key, [FromBody] PurchaseOrder entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PurchaseOrders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PurchaseOrder),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/PurchaseOrders({key})")]
        public IActionResult PatchPurchaseOrder(int key, Delta<PurchaseOrder> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PurchaseOrders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PurchaseOrder),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PurchaseOrders({key})")]
        public IActionResult DeletePurchaseOrder(int key)
        {
            var original = _context.PurchaseOrders.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PurchaseOrder),
                    EntityId = key
                };
            }

            _context.PurchaseOrders.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PurchaseOrders

        #region PurchaseOrderLines

        [EnableQuery]
        [HttpGet("odata/PurchaseOrderLines")]
        [HttpGet("odata/PurchaseOrderLines/$count")]
        public IActionResult GetPurchaseOrderLines()
        {
            return Ok(_context.PurchaseOrderLines);
        }

        [EnableQuery]
        [HttpGet("odata/PurchaseOrderLines({key})")]
        public IActionResult GetPurchaseOrderLines(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.PurchaseOrderLines.Where(x => x.PurchaseOrderLineId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PurchaseOrderLine),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/PurchaseOrderLines")]
        public IActionResult PostPurchaseOrderLine([FromBody]PurchaseOrderLine entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PurchaseOrderLines({key})")]
        public IActionResult PutPurchaseOrderLine(int key, [FromBody] PurchaseOrderLine entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PurchaseOrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(PurchaseOrderLine),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/PurchaseOrderLines({key})")]
        public IActionResult PatchPurchaseOrderLine(int key, Delta<PurchaseOrderLine> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.PurchaseOrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PurchaseOrderLine),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PurchaseOrderLines({key})")]
        public IActionResult DeletePurchaseOrderLine(int key)
        {
            var original = _context.PurchaseOrderLines.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(PurchaseOrderLine),
                    EntityId = key
                };
            }

            _context.PurchaseOrderLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PurchaseOrderLines

        #region SpecialDeals

        [EnableQuery]
        [HttpGet("odata/SpecialDeals")]
        [HttpGet("odata/SpecialDeals/$count")]
        public IActionResult GetSpecialDeals()
        {
            return Ok(_context.SpecialDeals);
        }

        [EnableQuery]
        [HttpGet("odata/SpecialDeals({key})")]
        public IActionResult GetSpecialDeals(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.SpecialDeals.Where(x => x.SpecialDealId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SpecialDeal),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/SpecialDeals")]
        public IActionResult PostSpecialDeal([FromBody]SpecialDeal entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SpecialDeals({key})")]
        public IActionResult PutSpecialDeal(int key, [FromBody] SpecialDeal entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SpecialDeals.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SpecialDeal),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/SpecialDeals({key})")]
        public IActionResult PatchSpecialDeal(int key, Delta<SpecialDeal> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SpecialDeals.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SpecialDeal),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SpecialDeals({key})")]
        public IActionResult DeleteSpecialDeal(int key)
        {
            var original = _context.SpecialDeals.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SpecialDeal),
                    EntityId = key
                };
            }

            _context.SpecialDeals.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SpecialDeals

        #region StateProvinces

        [EnableQuery]
        [HttpGet("odata/StateProvinces")]
        [HttpGet("odata/StateProvinces/$count")]
        public IActionResult GetStateProvinces()
        {
            return Ok(_context.StateProvinces);
        }

        [EnableQuery]
        [HttpGet("odata/StateProvinces({key})")]
        public IActionResult GetStateProvinces(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.StateProvinces.Where(x => x.StateProvinceId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StateProvince),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/StateProvinces")]
        public IActionResult PostStateProvince([FromBody]StateProvince entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StateProvinces({key})")]
        public IActionResult PutStateProvince(int key, [FromBody] StateProvince entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StateProvinces.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StateProvince),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/StateProvinces({key})")]
        public IActionResult PatchStateProvince(int key, Delta<StateProvince> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StateProvinces.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StateProvince),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StateProvinces({key})")]
        public IActionResult DeleteStateProvince(int key)
        {
            var original = _context.StateProvinces.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StateProvince),
                    EntityId = key
                };
            }

            _context.StateProvinces.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StateProvinces

        #region StockGroups

        [EnableQuery]
        [HttpGet("odata/StockGroups")]
        [HttpGet("odata/StockGroups/$count")]
        public IActionResult GetStockGroups()
        {
            return Ok(_context.StockGroups);
        }

        [EnableQuery]
        [HttpGet("odata/StockGroups({key})")]
        public IActionResult GetStockGroups(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.StockGroups.Where(x => x.StockGroupId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockGroup),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/StockGroups")]
        public IActionResult PostStockGroup([FromBody]StockGroup entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockGroups({key})")]
        public IActionResult PutStockGroup(int key, [FromBody] StockGroup entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockGroup),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/StockGroups({key})")]
        public IActionResult PatchStockGroup(int key, Delta<StockGroup> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockGroup),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockGroups({key})")]
        public IActionResult DeleteStockGroup(int key)
        {
            var original = _context.StockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockGroup),
                    EntityId = key
                };
            }

            _context.StockGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockGroups

        #region StockItems

        [EnableQuery]
        [HttpGet("odata/StockItems")]
        [HttpGet("odata/StockItems/$count")]
        public IActionResult GetStockItems()
        {
            return Ok(_context.StockItems);
        }

        [EnableQuery]
        [HttpGet("odata/StockItems({key})")]
        public IActionResult GetStockItems(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.StockItems.Where(x => x.StockItemId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItem),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/StockItems")]
        public IActionResult PostStockItem([FromBody]StockItem entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItems({key})")]
        public IActionResult PutStockItem(int key, [FromBody] StockItem entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItems.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItem),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/StockItems({key})")]
        public IActionResult PatchStockItem(int key, Delta<StockItem> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItems.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItem),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItems({key})")]
        public IActionResult DeleteStockItem(int key)
        {
            var original = _context.StockItems.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItem),
                    EntityId = key
                };
            }

            _context.StockItems.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItems

        #region StockItemStockGroups

        [EnableQuery]
        [HttpGet("odata/StockItemStockGroups")]
        [HttpGet("odata/StockItemStockGroups/$count")]
        public IActionResult GetStockItemStockGroups()
        {
            return Ok(_context.StockItemStockGroups);
        }

        [EnableQuery]
        [HttpGet("odata/StockItemStockGroups({key})")]
        public IActionResult GetStockItemStockGroups(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.StockItemStockGroups.Where(x => x.StockItemStockGroupId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItemStockGroup),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/StockItemStockGroups")]
        public IActionResult PostStockItemStockGroup([FromBody]StockItemStockGroup entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItemStockGroups({key})")]
        public IActionResult PutStockItemStockGroup(int key, [FromBody] StockItemStockGroup entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItemStockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItemStockGroup),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/StockItemStockGroups({key})")]
        public IActionResult PatchStockItemStockGroup(int key, Delta<StockItemStockGroup> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItemStockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItemStockGroup),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItemStockGroups({key})")]
        public IActionResult DeleteStockItemStockGroup(int key)
        {
            var original = _context.StockItemStockGroups.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItemStockGroup),
                    EntityId = key
                };
            }

            _context.StockItemStockGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItemStockGroups

        #region StockItemTransactions

        [EnableQuery]
        [HttpGet("odata/StockItemTransactions")]
        [HttpGet("odata/StockItemTransactions/$count")]
        public IActionResult GetStockItemTransactions()
        {
            return Ok(_context.StockItemTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/StockItemTransactions({key})")]
        public IActionResult GetStockItemTransactions(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.StockItemTransactions.Where(x => x.StockItemTransactionId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItemTransaction),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/StockItemTransactions")]
        public IActionResult PostStockItemTransaction([FromBody]StockItemTransaction entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItemTransactions({key})")]
        public IActionResult PutStockItemTransaction(int key, [FromBody] StockItemTransaction entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItemTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(StockItemTransaction),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/StockItemTransactions({key})")]
        public IActionResult PatchStockItemTransaction(int key, Delta<StockItemTransaction> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.StockItemTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItemTransaction),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItemTransactions({key})")]
        public IActionResult DeleteStockItemTransaction(int key)
        {
            var original = _context.StockItemTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(StockItemTransaction),
                    EntityId = key
                };
            }

            _context.StockItemTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItemTransactions

        #region Suppliers

        [EnableQuery]
        [HttpGet("odata/Suppliers")]
        [HttpGet("odata/Suppliers/$count")]
        public IActionResult GetSuppliers()
        {
            return Ok(_context.Suppliers);
        }

        [EnableQuery]
        [HttpGet("odata/Suppliers({key})")]
        public IActionResult GetSuppliers(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.Suppliers.Where(x => x.SupplierId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Supplier),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/Suppliers")]
        public IActionResult PostSupplier([FromBody]Supplier entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Suppliers({key})")]
        public IActionResult PutSupplier(int key, [FromBody] Supplier entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Suppliers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(Supplier),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/Suppliers({key})")]
        public IActionResult PatchSupplier(int key, Delta<Supplier> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.Suppliers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Supplier),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Suppliers({key})")]
        public IActionResult DeleteSupplier(int key)
        {
            var original = _context.Suppliers.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(Supplier),
                    EntityId = key
                };
            }

            _context.Suppliers.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Suppliers

        #region SupplierCategories

        [EnableQuery]
        [HttpGet("odata/SupplierCategories")]
        [HttpGet("odata/SupplierCategories/$count")]
        public IActionResult GetSupplierCategories()
        {
            return Ok(_context.SupplierCategories);
        }

        [EnableQuery]
        [HttpGet("odata/SupplierCategories({key})")]
        public IActionResult GetSupplierCategories(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.SupplierCategories.Where(x => x.SupplierCategoryId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SupplierCategory),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/SupplierCategories")]
        public IActionResult PostSupplierCategory([FromBody]SupplierCategory entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SupplierCategories({key})")]
        public IActionResult PutSupplierCategory(int key, [FromBody] SupplierCategory entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SupplierCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SupplierCategory),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/SupplierCategories({key})")]
        public IActionResult PatchSupplierCategory(int key, Delta<SupplierCategory> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SupplierCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SupplierCategory),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SupplierCategories({key})")]
        public IActionResult DeleteSupplierCategory(int key)
        {
            var original = _context.SupplierCategories.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SupplierCategory),
                    EntityId = key
                };
            }

            _context.SupplierCategories.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SupplierCategories

        #region SupplierTransactions

        [EnableQuery]
        [HttpGet("odata/SupplierTransactions")]
        [HttpGet("odata/SupplierTransactions/$count")]
        public IActionResult GetSupplierTransactions()
        {
            return Ok(_context.SupplierTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/SupplierTransactions({key})")]
        public IActionResult GetSupplierTransactions(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.SupplierTransactions.Where(x => x.SupplierTransactionId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SupplierTransaction),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/SupplierTransactions")]
        public IActionResult PostSupplierTransaction([FromBody]SupplierTransaction entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SupplierTransactions({key})")]
        public IActionResult PutSupplierTransaction(int key, [FromBody] SupplierTransaction entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SupplierTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SupplierTransaction),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/SupplierTransactions({key})")]
        public IActionResult PatchSupplierTransaction(int key, Delta<SupplierTransaction> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SupplierTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SupplierTransaction),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SupplierTransactions({key})")]
        public IActionResult DeleteSupplierTransaction(int key)
        {
            var original = _context.SupplierTransactions.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SupplierTransaction),
                    EntityId = key
                };
            }

            _context.SupplierTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SupplierTransactions

        #region SystemParameters

        [EnableQuery]
        [HttpGet("odata/SystemParameters")]
        [HttpGet("odata/SystemParameters/$count")]
        public IActionResult GetSystemParameters()
        {
            return Ok(_context.SystemParameters);
        }

        [EnableQuery]
        [HttpGet("odata/SystemParameters({key})")]
        public IActionResult GetSystemParameters(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.SystemParameters.Where(x => x.SystemParameterId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SystemParameter),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/SystemParameters")]
        public IActionResult PostSystemParameter([FromBody]SystemParameter entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SystemParameters({key})")]
        public IActionResult PutSystemParameter(int key, [FromBody] SystemParameter entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SystemParameters.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(SystemParameter),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/SystemParameters({key})")]
        public IActionResult PatchSystemParameter(int key, Delta<SystemParameter> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.SystemParameters.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SystemParameter),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SystemParameters({key})")]
        public IActionResult DeleteSystemParameter(int key)
        {
            var original = _context.SystemParameters.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(SystemParameter),
                    EntityId = key
                };
            }

            _context.SystemParameters.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SystemParameters

        #region TransactionTypes

        [EnableQuery]
        [HttpGet("odata/TransactionTypes")]
        [HttpGet("odata/TransactionTypes/$count")]
        public IActionResult GetTransactionTypes()
        {
            return Ok(_context.TransactionTypes);
        }

        [EnableQuery]
        [HttpGet("odata/TransactionTypes({key})")]
        public IActionResult GetTransactionTypes(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.TransactionTypes.Where(x => x.TransactionTypeId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(TransactionType),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/TransactionTypes")]
        public IActionResult PostTransactionType([FromBody]TransactionType entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/TransactionTypes({key})")]
        public IActionResult PutTransactionType(int key, [FromBody] TransactionType entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.TransactionTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(TransactionType),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/TransactionTypes({key})")]
        public IActionResult PatchTransactionType(int key, Delta<TransactionType> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.TransactionTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(TransactionType),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/TransactionTypes({key})")]
        public IActionResult DeleteTransactionType(int key)
        {
            var original = _context.TransactionTypes.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(TransactionType),
                    EntityId = key
                };
            }

            _context.TransactionTypes.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion TransactionTypes

        #region VehicleTemperatures

        [EnableQuery]
        [HttpGet("odata/VehicleTemperatures")]
        [HttpGet("odata/VehicleTemperatures/$count")]
        public IActionResult GetVehicleTemperatures()
        {
            return Ok(_context.VehicleTemperatures);
        }

        [EnableQuery]
        [HttpGet("odata/VehicleTemperatures({key})")]
        public IActionResult GetVehicleTemperatures(int key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.VehicleTemperatures.Where(x => x.VehicleTemperatureId == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(VehicleTemperature),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/VehicleTemperatures")]
        public IActionResult PostVehicleTemperature([FromBody]VehicleTemperature entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/VehicleTemperatures({key})")]
        public IActionResult PutVehicleTemperature(int key, [FromBody] VehicleTemperature entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.VehicleTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(VehicleTemperature),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/VehicleTemperatures({key})")]
        public IActionResult PatchVehicleTemperature(int key, Delta<VehicleTemperature> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.VehicleTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(VehicleTemperature),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/VehicleTemperatures({key})")]
        public IActionResult DeleteVehicleTemperature(int key)
        {
            var original = _context.VehicleTemperatures.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(VehicleTemperature),
                    EntityId = key
                };
            }

            _context.VehicleTemperatures.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion VehicleTemperatures

    }
}

