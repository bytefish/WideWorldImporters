<#@ output extension=".cs"#>
<#@ template language="C#" hostspecific="True" #>
<#
    var entitySets = new EntitySet[] 
    {
        new EntitySet("BuyingGroups", "BuyingGroup", "buyingGroupsId", "int"),
        new EntitySet("Cities", "City", "cityId", "int"),
        new EntitySet("ColdRoomTemperatures", "ColdRoomTemperature", "coldRoomTemperatureId", "long"),
        new EntitySet("Colors", "Color", "colorId", "int"),
        new EntitySet("Countries", "Country", "countryId", "int"),
        new EntitySet("Customers", "Customer", "customerId", "int"),
        new EntitySet("CustomerCategories", "CustomerCategory", "customerCategoryId", "int"),
        new EntitySet("CustomerTransactions", "CustomerTransaction", "customerTransactionId", "int"),
        new EntitySet("DeliveryMethods", "DeliveryMethod", "deliveryMethodId", "int"),
        new EntitySet("Invoices", "Invoice", "invoiceId", "int"),
        new EntitySet("InvoiceLines", "InvoiceLine", "invoiceLineId", "int"),
        new EntitySet("Orders", "Order", "orderId", "int"),
        new EntitySet("OrderLines", "OrderLine", "orderLineId", "int"),
        new EntitySet("PackageTypes", "PackageType", "packageTypeId", "int"),
        new EntitySet("PaymentMethods", "PaymentMethod", "paymentMethodId", "int"),
        new EntitySet("People", "Person", "personId", "int"),
        new EntitySet("PurchaseOrders", "PurchaseOrder", "purchaseOrderId", "int"),
        new EntitySet("PurchaseOrderLines", "PurchaseOrderLine", "purchaseOrderLineId", "int"),
        new EntitySet("SpecialDeals", "SpecialDeal", "specialDealId", "int"),
        new EntitySet("StateProvinces", "StateProvince", "stateProvinceId", "int"),
        new EntitySet("StockGroups", "StockGroup", "stockGroupId", "int"),
        new EntitySet("StockItems", "StockItem", "stockItemId", "int"),
        new EntitySet("StockItemStockGroups", "StockItemStockGroup", "stockItemStockGroupId", "int"),
        new EntitySet("StockItemTransactions", "StockItemTransaction", "stockItemTransactionId", "int"),
        new EntitySet("Suppliers", "Supplier", "supplierId", "int"),
        new EntitySet("SupplierCategories", "SupplierCategory", "supplierCategoryId", "int"),
        new EntitySet("SupplierTransactions", "SupplierTransaction", "supplierTransactionId", "int"),
        new EntitySet("SystemParameters", "SystemParameter", "systemParameterId", "int"),
        new EntitySet("TransactionTypes", "TransactionType", "transactionTypeId", "int"),
        new EntitySet("VehicleTemperatures", "VehicleTemperature", "vehicleTemperatureId", "int"),
    };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using WideWorldImporters.Server.Database;
using WideWorldImporters.Server.Database.Models;
using Microsoft.AspNetCore.OData.Results;
using WideWorldImporters.Server.Api.Infrastructure.Exceptions;
using WideWorldImporters.Server.Api.Infrastructure.Errors;
using WideWorldImporters.Server.Api.Infrastructure.Logging;

namespace WideWorldImporters.Api.Controllers
{
    public partial class EntitiesController : ODataController
    {
        private readonly ILogger<EntitiesController> _logger;
        private readonly ApplicationErrorHandler _applicationErrorHandler;
        private readonly WideWorldImportersContext _context;
        
        public EntitiesController(ILogger<EntitiesController> logger, ApplicationErrorHandler applicationErrorHandler, WideWorldImportersContext context)
        {
            _logger = logger;
            _applicationErrorHandler = applicationErrorHandler;
            _context = context;
        }

<# foreach(var entitySet in entitySets) { #>
        #region <#= entitySet.EntitySetName #>

        [EnableQuery]
        [HttpGet("odata/<#= entitySet.EntitySetName #>")]
        public IActionResult Get<#= entitySet.EntitySetName #>()
        {
            return Ok(_context.<#= entitySet.EntitySetName #>);
        }

        [EnableQuery]
        [HttpGet("odata/<#= entitySet.EntitySetName #>({key})")]
        public IActionResult Get<#= entitySet.EntitySetName #>(<#= entitySet.EntityKeyType #> key)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var entity = _context.<#= entitySet.EntitySetName #>.Where(x => x.<#= entitySet.EntityName #>Id == key);

            if (!entity.Any())
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(<#= entitySet.EntityName #>),
                    EntityId = key
                };
            }

            return Ok(SingleResult.Create(entity));
        }

        [HttpPost("odata/<#= entitySet.EntitySetName #>")]
        public IActionResult Post<#= entitySet.EntityName #>([FromBody]<#= entitySet.EntityName #> entity, CancellationToken token)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/<#= entitySet.EntitySetName #>({key})")]
        public IActionResult Put<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> key, [FromBody] <#= entitySet.EntityName #> entity)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.<#= entitySet.EntitySetName #>.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException 
                {
                    EntityName = nameof(<#= entitySet.EntityName #>),
                    EntityId = key
                };
            }

            _context.Entry(original)
                .CurrentValues
                .SetValues(entity);

            _context.SaveChanges();

            return Ok(original);
        }

        [HttpPatch("odata/<#= entitySet.EntitySetName #>({key})")]
        public IActionResult Patch<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> key, Delta<<#= entitySet.EntityName #>> delta)
        {
            _logger.TraceMethodEntry();

            if (!ModelState.IsValid)
            {
                return _applicationErrorHandler.HandleInvalidModelState(HttpContext, ModelState);
            }

            var original = _context.<#= entitySet.EntitySetName #>.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(<#= entitySet.EntityName #>),
                    EntityId = key
                };
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/<#= entitySet.EntitySetName #>({key})")]
        public IActionResult Delete<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> key)
        {
            var original = _context.<#= entitySet.EntitySetName #>.Find(key);

            if (original == null)
            {
                throw new EntityNotFoundException
                {
                    EntityName = nameof(<#= entitySet.EntityName #>),
                    EntityId = key
                };
            }

            _context.<#= entitySet.EntitySetName #>.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion <#= entitySet.EntitySetName #>

<# } #>
    }
}

<#+
	public class EntitySet 
    {
        public readonly string EntityName;
        public readonly string EntityKeyName;
        public readonly string EntityKeyType;
        public readonly string EntitySetName;
        
        public EntitySet (string entitySetName, string entityName, string entityKeyName, string entityKeyType) 
        {
            EntitySetName = entitySetName;
            EntityName = entityName;
            EntityKeyName = entityKeyName;
            EntityKeyType = entityKeyType;
        }
    } 
#>