// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
using WideWorldImporters.Shared.ApiSdk.Models.WideWorldImportersService.ODataErrors;
using WideWorldImporters.Shared.ApiSdk.Models.WideWorldImportersService;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.BuyingGroups;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.Cities;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.Colors;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.Countries;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.CustomerAlternateContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.CustomerCategories;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.CustomerLastEditedByNavigations;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.CustomerPrimaryContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.CustomerTransactions;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.DeliveryMethods;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InverseLastEditedByNavigation;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoiceAccountsPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoiceContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoiceLastEditedByNavigations;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoiceLines;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoicePackedByPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.InvoiceSalespersonPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.LastEditedByNavigation;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.OrderContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.OrderLastEditedByNavigations;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.OrderLines;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.OrderPickedByPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.OrderSalespersonPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.PackageTypes;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.PaymentMethods;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.PurchaseOrderContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.PurchaseOrderLastEditedByNavigations;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.PurchaseOrderLines;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SpecialDeals;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StateProvinces;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StockGroups;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StockItemHoldings;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StockItemStockGroups;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StockItemTransactions;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.StockItems;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SupplierAlternateContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SupplierCategories;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SupplierLastEditedByNavigations;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SupplierPrimaryContactPeople;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SupplierTransactions;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.SystemParameters;
using WideWorldImporters.Shared.ApiSdk.Odata.People.Item.TransactionTypes;
namespace WideWorldImporters.Shared.ApiSdk.Odata.People.Item {
    /// <summary>
    /// Provides operations to manage the collection of Person entities.
    /// </summary>
    public class WithPersonItemRequestBuilder : BaseRequestBuilder {
        /// <summary>Provides operations to manage the buyingGroups property of the WideWorldImportersService.Person entity.</summary>
        public BuyingGroupsRequestBuilder BuyingGroups { get =>
            new BuyingGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the cities property of the WideWorldImportersService.Person entity.</summary>
        public CitiesRequestBuilder Cities { get =>
            new CitiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the colors property of the WideWorldImportersService.Person entity.</summary>
        public ColorsRequestBuilder Colors { get =>
            new ColorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the countries property of the WideWorldImportersService.Person entity.</summary>
        public CountriesRequestBuilder Countries { get =>
            new CountriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the customerAlternateContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public CustomerAlternateContactPeopleRequestBuilder CustomerAlternateContactPeople { get =>
            new CustomerAlternateContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the customerCategories property of the WideWorldImportersService.Person entity.</summary>
        public CustomerCategoriesRequestBuilder CustomerCategories { get =>
            new CustomerCategoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the customerLastEditedByNavigations property of the WideWorldImportersService.Person entity.</summary>
        public CustomerLastEditedByNavigationsRequestBuilder CustomerLastEditedByNavigations { get =>
            new CustomerLastEditedByNavigationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the customerPrimaryContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public CustomerPrimaryContactPeopleRequestBuilder CustomerPrimaryContactPeople { get =>
            new CustomerPrimaryContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the customerTransactions property of the WideWorldImportersService.Person entity.</summary>
        public CustomerTransactionsRequestBuilder CustomerTransactions { get =>
            new CustomerTransactionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the deliveryMethods property of the WideWorldImportersService.Person entity.</summary>
        public DeliveryMethodsRequestBuilder DeliveryMethods { get =>
            new DeliveryMethodsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the inverseLastEditedByNavigation property of the WideWorldImportersService.Person entity.</summary>
        public InverseLastEditedByNavigationRequestBuilder InverseLastEditedByNavigation { get =>
            new InverseLastEditedByNavigationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoiceAccountsPeople property of the WideWorldImportersService.Person entity.</summary>
        public InvoiceAccountsPeopleRequestBuilder InvoiceAccountsPeople { get =>
            new InvoiceAccountsPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoiceContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public InvoiceContactPeopleRequestBuilder InvoiceContactPeople { get =>
            new InvoiceContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoiceLastEditedByNavigations property of the WideWorldImportersService.Person entity.</summary>
        public InvoiceLastEditedByNavigationsRequestBuilder InvoiceLastEditedByNavigations { get =>
            new InvoiceLastEditedByNavigationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoiceLines property of the WideWorldImportersService.Person entity.</summary>
        public InvoiceLinesRequestBuilder InvoiceLines { get =>
            new InvoiceLinesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoicePackedByPeople property of the WideWorldImportersService.Person entity.</summary>
        public InvoicePackedByPeopleRequestBuilder InvoicePackedByPeople { get =>
            new InvoicePackedByPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the invoiceSalespersonPeople property of the WideWorldImportersService.Person entity.</summary>
        public InvoiceSalespersonPeopleRequestBuilder InvoiceSalespersonPeople { get =>
            new InvoiceSalespersonPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the lastEditedByNavigation property of the WideWorldImportersService.Person entity.</summary>
        public LastEditedByNavigationRequestBuilder LastEditedByNavigation { get =>
            new LastEditedByNavigationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the orderContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public OrderContactPeopleRequestBuilder OrderContactPeople { get =>
            new OrderContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the orderLastEditedByNavigations property of the WideWorldImportersService.Person entity.</summary>
        public OrderLastEditedByNavigationsRequestBuilder OrderLastEditedByNavigations { get =>
            new OrderLastEditedByNavigationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the orderLines property of the WideWorldImportersService.Person entity.</summary>
        public OrderLinesRequestBuilder OrderLines { get =>
            new OrderLinesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the orderPickedByPeople property of the WideWorldImportersService.Person entity.</summary>
        public OrderPickedByPeopleRequestBuilder OrderPickedByPeople { get =>
            new OrderPickedByPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the orderSalespersonPeople property of the WideWorldImportersService.Person entity.</summary>
        public OrderSalespersonPeopleRequestBuilder OrderSalespersonPeople { get =>
            new OrderSalespersonPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the packageTypes property of the WideWorldImportersService.Person entity.</summary>
        public PackageTypesRequestBuilder PackageTypes { get =>
            new PackageTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the paymentMethods property of the WideWorldImportersService.Person entity.</summary>
        public PaymentMethodsRequestBuilder PaymentMethods { get =>
            new PaymentMethodsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the purchaseOrderContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public PurchaseOrderContactPeopleRequestBuilder PurchaseOrderContactPeople { get =>
            new PurchaseOrderContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the purchaseOrderLastEditedByNavigations property of the WideWorldImportersService.Person entity.</summary>
        public PurchaseOrderLastEditedByNavigationsRequestBuilder PurchaseOrderLastEditedByNavigations { get =>
            new PurchaseOrderLastEditedByNavigationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the purchaseOrderLines property of the WideWorldImportersService.Person entity.</summary>
        public PurchaseOrderLinesRequestBuilder PurchaseOrderLines { get =>
            new PurchaseOrderLinesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the specialDeals property of the WideWorldImportersService.Person entity.</summary>
        public SpecialDealsRequestBuilder SpecialDeals { get =>
            new SpecialDealsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stateProvinces property of the WideWorldImportersService.Person entity.</summary>
        public StateProvincesRequestBuilder StateProvinces { get =>
            new StateProvincesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stockGroups property of the WideWorldImportersService.Person entity.</summary>
        public StockGroupsRequestBuilder StockGroups { get =>
            new StockGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stockItemHoldings property of the WideWorldImportersService.Person entity.</summary>
        public StockItemHoldingsRequestBuilder StockItemHoldings { get =>
            new StockItemHoldingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stockItems property of the WideWorldImportersService.Person entity.</summary>
        public StockItemsRequestBuilder StockItems { get =>
            new StockItemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stockItemStockGroups property of the WideWorldImportersService.Person entity.</summary>
        public StockItemStockGroupsRequestBuilder StockItemStockGroups { get =>
            new StockItemStockGroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the stockItemTransactions property of the WideWorldImportersService.Person entity.</summary>
        public StockItemTransactionsRequestBuilder StockItemTransactions { get =>
            new StockItemTransactionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the supplierAlternateContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public SupplierAlternateContactPeopleRequestBuilder SupplierAlternateContactPeople { get =>
            new SupplierAlternateContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the supplierCategories property of the WideWorldImportersService.Person entity.</summary>
        public SupplierCategoriesRequestBuilder SupplierCategories { get =>
            new SupplierCategoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the supplierLastEditedByNavigations property of the WideWorldImportersService.Person entity.</summary>
        public SupplierLastEditedByNavigationsRequestBuilder SupplierLastEditedByNavigations { get =>
            new SupplierLastEditedByNavigationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the supplierPrimaryContactPeople property of the WideWorldImportersService.Person entity.</summary>
        public SupplierPrimaryContactPeopleRequestBuilder SupplierPrimaryContactPeople { get =>
            new SupplierPrimaryContactPeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the supplierTransactions property of the WideWorldImportersService.Person entity.</summary>
        public SupplierTransactionsRequestBuilder SupplierTransactions { get =>
            new SupplierTransactionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the systemParameters property of the WideWorldImportersService.Person entity.</summary>
        public SystemParametersRequestBuilder SystemParameters { get =>
            new SystemParametersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Provides operations to manage the transactionTypes property of the WideWorldImportersService.Person entity.</summary>
        public TransactionTypesRequestBuilder TransactionTypes { get =>
            new TransactionTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithPersonItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPersonItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/odata/People/{personId}{?%24select,%24expand}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithPersonItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPersonItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/odata/People/{personId}{?%24select,%24expand}", rawUrl) {
        }
        /// <summary>
        /// Delete entity from People
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<WithPersonItemRequestBuilderDeleteRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task DeleteAsync(Action<WithPersonItemRequestBuilderDeleteRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", ODataError.CreateFromDiscriminatorValue},
                {"5XX", ODataError.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get entity from People by key
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Person?> GetAsync(Action<WithPersonItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Person> GetAsync(Action<WithPersonItemRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", ODataError.CreateFromDiscriminatorValue},
                {"5XX", ODataError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<Person>(requestInfo, Person.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update entity in People
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(Person body, Action<WithPersonItemRequestBuilderPatchRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task PatchAsync(Person body, Action<WithPersonItemRequestBuilderPatchRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", ODataError.CreateFromDiscriminatorValue},
                {"5XX", ODataError.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete entity from People
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<WithPersonItemRequestBuilderDeleteRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<WithPersonItemRequestBuilderDeleteRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.DELETE,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new WithPersonItemRequestBuilderDeleteRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get entity from People by key
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<WithPersonItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<WithPersonItemRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new WithPersonItemRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            requestInfo.Headers.TryAdd("Accept", "application/json;q=1");
            return requestInfo;
        }
        /// <summary>
        /// Update entity in People
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(Person body, Action<WithPersonItemRequestBuilderPatchRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(Person body, Action<WithPersonItemRequestBuilderPatchRequestConfiguration> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation {
                HttpMethod = Method.PATCH,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new WithPersonItemRequestBuilderPatchRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithPersonItemRequestBuilder WithUrl(string rawUrl) {
            return new WithPersonItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithPersonItemRequestBuilderDeleteRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new WithPersonItemRequestBuilderDeleteRequestConfiguration and sets the default values.
            /// </summary>
            public WithPersonItemRequestBuilderDeleteRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Get entity from People by key
        /// </summary>
        public class WithPersonItemRequestBuilderGetQueryParameters {
            /// <summary>Expand related entities</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("%24expand")]
            public string[] Expand { get; set; }
#endif
            /// <summary>Select properties to be returned</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("%24select")]
            public string[]? Select { get; set; }
#nullable restore
#else
            [QueryParameter("%24select")]
            public string[] Select { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithPersonItemRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public WithPersonItemRequestBuilderGetQueryParameters QueryParameters { get; set; } = new WithPersonItemRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new WithPersonItemRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public WithPersonItemRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithPersonItemRequestBuilderPatchRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new WithPersonItemRequestBuilderPatchRequestConfiguration and sets the default values.
            /// </summary>
            public WithPersonItemRequestBuilderPatchRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
