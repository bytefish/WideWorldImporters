// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
using WideWorldImporters.Shared.ApiSdk.Models.Edm;
namespace WideWorldImporters.Shared.ApiSdk.Models.WideWorldImportersService {
    #pragma warning disable CS1591
    public class Country : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The border property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Geometry? Border { get; set; }
#nullable restore
#else
        public Geometry Border { get; set; }
#endif
        /// <summary>The continent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Continent { get; set; }
#nullable restore
#else
        public string Continent { get; set; }
#endif
        /// <summary>The countryId property</summary>
        public int? CountryId { get; set; }
        /// <summary>The countryName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryName { get; set; }
#nullable restore
#else
        public string CountryName { get; set; }
#endif
        /// <summary>The countryType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryType { get; set; }
#nullable restore
#else
        public string CountryType { get; set; }
#endif
        /// <summary>The formalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormalName { get; set; }
#nullable restore
#else
        public string FormalName { get; set; }
#endif
        /// <summary>The isoAlpha3Code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsoAlpha3Code { get; set; }
#nullable restore
#else
        public string IsoAlpha3Code { get; set; }
#endif
        /// <summary>The isoNumericCode property</summary>
        public int? IsoNumericCode { get; set; }
        /// <summary>The lastEditedBy property</summary>
        public int? LastEditedBy { get; set; }
        /// <summary>The lastEditedByNavigation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Person? LastEditedByNavigation { get; set; }
#nullable restore
#else
        public Person LastEditedByNavigation { get; set; }
#endif
        /// <summary>The latestRecordedPopulation property</summary>
        public long? LatestRecordedPopulation { get; set; }
        /// <summary>The region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>The stateProvinces property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StateProvince>? StateProvinces { get; set; }
#nullable restore
#else
        public List<StateProvince> StateProvinces { get; set; }
#endif
        /// <summary>The subregion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subregion { get; set; }
#nullable restore
#else
        public string Subregion { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Country"/> and sets the default values.
        /// </summary>
        public Country()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Country"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Country CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Country();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"border", n => { Border = n.GetObjectValue<Geometry>(Geometry.CreateFromDiscriminatorValue); } },
                {"continent", n => { Continent = n.GetStringValue(); } },
                {"countryId", n => { CountryId = n.GetIntValue(); } },
                {"countryName", n => { CountryName = n.GetStringValue(); } },
                {"countryType", n => { CountryType = n.GetStringValue(); } },
                {"formalName", n => { FormalName = n.GetStringValue(); } },
                {"isoAlpha3Code", n => { IsoAlpha3Code = n.GetStringValue(); } },
                {"isoNumericCode", n => { IsoNumericCode = n.GetIntValue(); } },
                {"lastEditedBy", n => { LastEditedBy = n.GetIntValue(); } },
                {"lastEditedByNavigation", n => { LastEditedByNavigation = n.GetObjectValue<Person>(Person.CreateFromDiscriminatorValue); } },
                {"latestRecordedPopulation", n => { LatestRecordedPopulation = n.GetLongValue(); } },
                {"region", n => { Region = n.GetStringValue(); } },
                {"stateProvinces", n => { StateProvinces = n.GetCollectionOfObjectValues<StateProvince>(StateProvince.CreateFromDiscriminatorValue)?.ToList(); } },
                {"subregion", n => { Subregion = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Geometry>("border", Border);
            writer.WriteStringValue("continent", Continent);
            writer.WriteIntValue("countryId", CountryId);
            writer.WriteStringValue("countryName", CountryName);
            writer.WriteStringValue("countryType", CountryType);
            writer.WriteStringValue("formalName", FormalName);
            writer.WriteStringValue("isoAlpha3Code", IsoAlpha3Code);
            writer.WriteIntValue("isoNumericCode", IsoNumericCode);
            writer.WriteIntValue("lastEditedBy", LastEditedBy);
            writer.WriteObjectValue<Person>("lastEditedByNavigation", LastEditedByNavigation);
            writer.WriteLongValue("latestRecordedPopulation", LatestRecordedPopulation);
            writer.WriteStringValue("region", Region);
            writer.WriteCollectionOfObjectValues<StateProvince>("stateProvinces", StateProvinces);
            writer.WriteStringValue("subregion", Subregion);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
