// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace WideWorldImporters.Shared.ApiSdk.Models.Edm
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint"/>, <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Geography : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection? GeometryCollection { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection GeometryCollection { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString? GeometryLineString { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString GeometryLineString { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString? GeometryMultiLineString { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString GeometryMultiLineString { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint? GeometryMultiPoint { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint GeometryMultiPoint { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon? GeometryMultiPolygon { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon GeometryMultiPolygon { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint? GeometryPoint { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint GeometryPoint { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon? GeometryPolygon { get; set; }
#nullable restore
#else
        public global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon GeometryPolygon { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::WideWorldImporters.Shared.ApiSdk.Models.Edm.Geography"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::WideWorldImporters.Shared.ApiSdk.Models.Edm.Geography CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.Geography();
            if("Edm.GeometryCollection".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryCollection = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection();
            }
            else if("Edm.GeometryLineString".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryLineString = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString();
            }
            else if("Edm.GeometryMultiLineString".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryMultiLineString = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString();
            }
            else if("Edm.GeometryMultiPoint".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryMultiPoint = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint();
            }
            else if("Edm.GeometryMultiPolygon".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryMultiPolygon = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon();
            }
            else if("Edm.GeometryPoint".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryPoint = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint();
            }
            else if("Edm.GeometryPolygon".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
            {
                result.GeometryPolygon = new global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(GeometryCollection != null)
            {
                return GeometryCollection.GetFieldDeserializers();
            }
            else if(GeometryLineString != null)
            {
                return GeometryLineString.GetFieldDeserializers();
            }
            else if(GeometryMultiLineString != null)
            {
                return GeometryMultiLineString.GetFieldDeserializers();
            }
            else if(GeometryMultiPoint != null)
            {
                return GeometryMultiPoint.GetFieldDeserializers();
            }
            else if(GeometryMultiPolygon != null)
            {
                return GeometryMultiPolygon.GetFieldDeserializers();
            }
            else if(GeometryPoint != null)
            {
                return GeometryPoint.GetFieldDeserializers();
            }
            else if(GeometryPolygon != null)
            {
                return GeometryPolygon.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(GeometryCollection != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryCollection>(null, GeometryCollection);
            }
            else if(GeometryLineString != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryLineString>(null, GeometryLineString);
            }
            else if(GeometryMultiLineString != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiLineString>(null, GeometryMultiLineString);
            }
            else if(GeometryMultiPoint != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPoint>(null, GeometryMultiPoint);
            }
            else if(GeometryMultiPolygon != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryMultiPolygon>(null, GeometryMultiPolygon);
            }
            else if(GeometryPoint != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPoint>(null, GeometryPoint);
            }
            else if(GeometryPolygon != null)
            {
                writer.WriteObjectValue<global::WideWorldImporters.Shared.ApiSdk.Models.Edm.GeometryPolygon>(null, GeometryPolygon);
            }
        }
    }
}
#pragma warning restore CS0618
