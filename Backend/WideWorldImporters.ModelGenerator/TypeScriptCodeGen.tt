//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#@ template language="C#" #>
<# 
foreach(var entityMetadata in EntityMetadatas) { 
#>
export interface <#= entityMetadata.Name #> {
<# 
    foreach(var propertyMetadata in entityMetadata.Properties) { 
#>
<#
        if(propertyMetadata.IsCollection) { 
#>
  <#= propertyMetadata.Name #>: Array<<#= propertyMetadata.ElementType #>> <#= propertyMetadata.IsNullable ? " | null" : "" #>;
<#
        } else { 
#>
  <#= propertyMetadata.Name #>?: <#= propertyMetadata.Type#><#= propertyMetadata.IsNullable ? " | null" : "" #>;
<#
        } 
#>
<#
    }
#>
}

<#
}

#>

export class Converters {
    
    public static convertDateArray(data: any) : Date[] | undefined {
        return Array.isArray(data) ? data.map(item => new Date(item)) : undefined;
    }

<# 
foreach(var entityMetadata in EntityMetadatas) { 
#>

    public static convertTo<#= entityMetadata.Name #>Array(data: any): <#= entityMetadata.Name #>[] | undefined {
        return Array.isArray(data) ? data.map(item => Converters.convertTo<#= entityMetadata.Name #>(item)) : undefined;
    }

    public static convertTo<#= entityMetadata.Name #>(data: any): <#= entityMetadata.Name #> | undefined {
        return data ? {
<#
    foreach(var propertyMetadata in entityMetadata.Properties) { 
#>
<#
        if(propertyMetadata.IsCollection) { 
#>
            <#= propertyMetadata.Name #>: Converters.convertTo<#= propertyMetadata.ElementType #>Array(data["<#= propertyMetadata.Name #>"]),
<#
        } else if(propertyMetadata.Type == "Date") { 
#>
            <#= propertyMetadata.Name #>: data["<#= propertyMetadata.Name #>"] ? new Date(data["<#= propertyMetadata.Name #>"]) : undefined,
<#
        } else  { 
#>
            <#= propertyMetadata.Name #>: data["<#= propertyMetadata.Name #>"],
<#
        }
#>
<#
    }
#>
        } : undefined;
    }
<#
    }
#>
}

<#+

    /// <summary>
    /// Metadata for the Entity.
    /// </summary>
    public class EntityMetadata
    { 
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Properties.
        /// </summary>
        public PropertyMetadata[] Properties { get; set; }
    }

        /// <summary>
    /// Holds all Property-related Metadata.
    /// </summary>
    public class PropertyMetadata
    {
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the Nullability information.
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        /// Gets or sets the Entity information.
        /// </summary>
        public bool IsEntity { get; set; }

        /// <summary>
        /// Gets or sets the Collection information.
        /// </summary>
        public bool IsCollection { get; set; }

        /// <summary>
        /// Gets or sets the Type of the array property.
        /// </summary>
        public string? ElementType { get; set; }

        /// <summary>
        /// Gets or sets the Information, if the array element is nullable.
        /// </summary>
        public bool? ElementIsNullable { get; set; }
    }

    // The Entity Metadata List, that we are generating interfaces and Converters for:
    public EntityMetadata[] EntityMetadatas { get; set; }
#>