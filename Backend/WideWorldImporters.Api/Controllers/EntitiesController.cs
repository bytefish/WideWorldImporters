//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using Microsoft.OpenApi.OData;
using Microsoft.OpenApi.Extensions;
using Microsoft.OpenApi;
using WideWorldImporters.Api.Models;
using WideWorldImporters.Database;
using WideWorldImporters.Database.Models;

namespace WideWorldImporters.Api.Controllers
{
    public partial class EntitiesController : ODataController
    {
        private readonly WideWorldImportersContext _context;

        public EntitiesController(WideWorldImportersContext context)
        {
            _context = context;
        }

        #region Swagger Endpoint
        
        [HttpGet("odata/swagger.json")]
        public IActionResult GetSwaggerDocument()
        {
            var edmModel = ApplicationEdmModel.GetEdmModel();

            // Convert to OpenApi:
            var openApiSettings = new OpenApiConvertSettings
            {
                ServiceRoot = new("http://localhost:5000"),
                PathPrefix = "odata",
                EnableKeyAsSegment = true,
            };

            var openApiDocument = edmModel
                .ConvertToOpenApi(openApiSettings)
                .SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);

            return Content(openApiDocument, "application/json");
        }

        #endregion Swagger Endpoint

        #region BuyingGroups

        [EnableQuery]
        [HttpGet("odata/BuyingGroups")]
        public IActionResult GetBuyingGroups()
        {
            return Ok(_context.BuyingGroups);
        }

        [EnableQuery]
        [HttpGet("odata/BuyingGroups({buyingGroupsId:int})")]
        public IActionResult GetBuyingGroups(int buyingGroupsId)
        {
            var entity = _context.BuyingGroups.Find(buyingGroupsId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/BuyingGroups")]
        public IActionResult PostBuyingGroup([FromBody]BuyingGroup entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/BuyingGroups/{buyingGroupsId:int}")]
        public IActionResult PutBuyingGroup(int buyingGroupsId, [FromBody] Delta<BuyingGroup> delta)
        {
            var original = _context.BuyingGroups.Find(buyingGroupsId);
            if (original == null)
            {
                return NotFound($"Not found BuyingGroup with buyingGroupsId = {buyingGroupsId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/BuyingGroups({buyingGroupsId:int})")]
        public IActionResult PatchBuyingGroup(int buyingGroupsId, Delta<BuyingGroup > delta)
        {
            var original = _context.BuyingGroups.Find(buyingGroupsId);

            if (original == null)
            {
                return NotFound($"Not found BuyingGroup with buyingGroupsId = {buyingGroupsId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/BuyingGroups({buyingGroupsId:int})")]
        public IActionResult DeleteBuyingGroup(int buyingGroupsId)
        {
            var original = _context.BuyingGroups.Find(buyingGroupsId);

            if (original == null)
            {
                return NotFound($"Not found BuyingGroup with buyingGroupsId = {buyingGroupsId}");
            }

            _context.BuyingGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion BuyingGroups

        #region Cities

        [EnableQuery]
        [HttpGet("odata/Cities")]
        public IActionResult GetCities()
        {
            return Ok(_context.Cities);
        }

        [EnableQuery]
        [HttpGet("odata/Cities({cityId:int})")]
        public IActionResult GetCities(int cityId)
        {
            var entity = _context.Cities.Find(cityId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Cities")]
        public IActionResult PostCity([FromBody]City entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Cities/{cityId:int}")]
        public IActionResult PutCity(int cityId, [FromBody] Delta<City> delta)
        {
            var original = _context.Cities.Find(cityId);
            if (original == null)
            {
                return NotFound($"Not found City with cityId = {cityId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Cities({cityId:int})")]
        public IActionResult PatchCity(int cityId, Delta<City > delta)
        {
            var original = _context.Cities.Find(cityId);

            if (original == null)
            {
                return NotFound($"Not found City with cityId = {cityId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Cities({cityId:int})")]
        public IActionResult DeleteCity(int cityId)
        {
            var original = _context.Cities.Find(cityId);

            if (original == null)
            {
                return NotFound($"Not found City with cityId = {cityId}");
            }

            _context.Cities.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Cities

        #region ColdRoomTemperatures

        [EnableQuery]
        [HttpGet("odata/ColdRoomTemperatures")]
        public IActionResult GetColdRoomTemperatures()
        {
            return Ok(_context.ColdRoomTemperatures);
        }

        [EnableQuery]
        [HttpGet("odata/ColdRoomTemperatures({coldRoomTemperatureId:long})")]
        public IActionResult GetColdRoomTemperatures(long coldRoomTemperatureId)
        {
            var entity = _context.ColdRoomTemperatures.Find(coldRoomTemperatureId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/ColdRoomTemperatures")]
        public IActionResult PostColdRoomTemperature([FromBody]ColdRoomTemperature entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/ColdRoomTemperatures/{coldRoomTemperatureId:long}")]
        public IActionResult PutColdRoomTemperature(long coldRoomTemperatureId, [FromBody] Delta<ColdRoomTemperature> delta)
        {
            var original = _context.ColdRoomTemperatures.Find(coldRoomTemperatureId);
            if (original == null)
            {
                return NotFound($"Not found ColdRoomTemperature with coldRoomTemperatureId = {coldRoomTemperatureId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/ColdRoomTemperatures({coldRoomTemperatureId:long})")]
        public IActionResult PatchColdRoomTemperature(long coldRoomTemperatureId, Delta<ColdRoomTemperature > delta)
        {
            var original = _context.ColdRoomTemperatures.Find(coldRoomTemperatureId);

            if (original == null)
            {
                return NotFound($"Not found ColdRoomTemperature with coldRoomTemperatureId = {coldRoomTemperatureId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/ColdRoomTemperatures({coldRoomTemperatureId:long})")]
        public IActionResult DeleteColdRoomTemperature(long coldRoomTemperatureId)
        {
            var original = _context.ColdRoomTemperatures.Find(coldRoomTemperatureId);

            if (original == null)
            {
                return NotFound($"Not found ColdRoomTemperature with coldRoomTemperatureId = {coldRoomTemperatureId}");
            }

            _context.ColdRoomTemperatures.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion ColdRoomTemperatures

        #region Colors

        [EnableQuery]
        [HttpGet("odata/Colors")]
        public IActionResult GetColors()
        {
            return Ok(_context.Colors);
        }

        [EnableQuery]
        [HttpGet("odata/Colors({colorId:int})")]
        public IActionResult GetColors(int colorId)
        {
            var entity = _context.Colors.Find(colorId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Colors")]
        public IActionResult PostColor([FromBody]Color entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Colors/{colorId:int}")]
        public IActionResult PutColor(int colorId, [FromBody] Delta<Color> delta)
        {
            var original = _context.Colors.Find(colorId);
            if (original == null)
            {
                return NotFound($"Not found Color with colorId = {colorId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Colors({colorId:int})")]
        public IActionResult PatchColor(int colorId, Delta<Color > delta)
        {
            var original = _context.Colors.Find(colorId);

            if (original == null)
            {
                return NotFound($"Not found Color with colorId = {colorId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Colors({colorId:int})")]
        public IActionResult DeleteColor(int colorId)
        {
            var original = _context.Colors.Find(colorId);

            if (original == null)
            {
                return NotFound($"Not found Color with colorId = {colorId}");
            }

            _context.Colors.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Colors

        #region Countries

        [EnableQuery]
        [HttpGet("odata/Countries")]
        public IActionResult GetCountries()
        {
            return Ok(_context.Countries);
        }

        [EnableQuery]
        [HttpGet("odata/Countries({countryId:int})")]
        public IActionResult GetCountries(int countryId)
        {
            var entity = _context.Countries.Find(countryId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Countries")]
        public IActionResult PostCountry([FromBody]Country entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Countries/{countryId:int}")]
        public IActionResult PutCountry(int countryId, [FromBody] Delta<Country> delta)
        {
            var original = _context.Countries.Find(countryId);
            if (original == null)
            {
                return NotFound($"Not found Country with countryId = {countryId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Countries({countryId:int})")]
        public IActionResult PatchCountry(int countryId, Delta<Country > delta)
        {
            var original = _context.Countries.Find(countryId);

            if (original == null)
            {
                return NotFound($"Not found Country with countryId = {countryId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Countries({countryId:int})")]
        public IActionResult DeleteCountry(int countryId)
        {
            var original = _context.Countries.Find(countryId);

            if (original == null)
            {
                return NotFound($"Not found Country with countryId = {countryId}");
            }

            _context.Countries.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Countries

        #region Customers

        [EnableQuery]
        [HttpGet("odata/Customers")]
        public IActionResult GetCustomers()
        {
            return Ok(_context.Customers);
        }

        [EnableQuery]
        [HttpGet("odata/Customers({customerId:int})")]
        public IActionResult GetCustomers(int customerId)
        {
            var entity = _context.Customers.Find(customerId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Customers")]
        public IActionResult PostCustomer([FromBody]Customer entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Customers/{customerId:int}")]
        public IActionResult PutCustomer(int customerId, [FromBody] Delta<Customer> delta)
        {
            var original = _context.Customers.Find(customerId);
            if (original == null)
            {
                return NotFound($"Not found Customer with customerId = {customerId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Customers({customerId:int})")]
        public IActionResult PatchCustomer(int customerId, Delta<Customer > delta)
        {
            var original = _context.Customers.Find(customerId);

            if (original == null)
            {
                return NotFound($"Not found Customer with customerId = {customerId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Customers({customerId:int})")]
        public IActionResult DeleteCustomer(int customerId)
        {
            var original = _context.Customers.Find(customerId);

            if (original == null)
            {
                return NotFound($"Not found Customer with customerId = {customerId}");
            }

            _context.Customers.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Customers

        #region CustomerCategories

        [EnableQuery]
        [HttpGet("odata/CustomerCategories")]
        public IActionResult GetCustomerCategories()
        {
            return Ok(_context.CustomerCategories);
        }

        [EnableQuery]
        [HttpGet("odata/CustomerCategories({customerCategoryId:int})")]
        public IActionResult GetCustomerCategories(int customerCategoryId)
        {
            var entity = _context.CustomerCategories.Find(customerCategoryId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/CustomerCategories")]
        public IActionResult PostCustomerCategory([FromBody]CustomerCategory entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/CustomerCategories/{customerCategoryId:int}")]
        public IActionResult PutCustomerCategory(int customerCategoryId, [FromBody] Delta<CustomerCategory> delta)
        {
            var original = _context.CustomerCategories.Find(customerCategoryId);
            if (original == null)
            {
                return NotFound($"Not found CustomerCategory with customerCategoryId = {customerCategoryId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/CustomerCategories({customerCategoryId:int})")]
        public IActionResult PatchCustomerCategory(int customerCategoryId, Delta<CustomerCategory > delta)
        {
            var original = _context.CustomerCategories.Find(customerCategoryId);

            if (original == null)
            {
                return NotFound($"Not found CustomerCategory with customerCategoryId = {customerCategoryId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/CustomerCategories({customerCategoryId:int})")]
        public IActionResult DeleteCustomerCategory(int customerCategoryId)
        {
            var original = _context.CustomerCategories.Find(customerCategoryId);

            if (original == null)
            {
                return NotFound($"Not found CustomerCategory with customerCategoryId = {customerCategoryId}");
            }

            _context.CustomerCategories.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion CustomerCategories

        #region CustomerTransactions

        [EnableQuery]
        [HttpGet("odata/CustomerTransactions")]
        public IActionResult GetCustomerTransactions()
        {
            return Ok(_context.CustomerTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/CustomerTransactions({customerTransactionId:int})")]
        public IActionResult GetCustomerTransactions(int customerTransactionId)
        {
            var entity = _context.CustomerTransactions.Find(customerTransactionId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/CustomerTransactions")]
        public IActionResult PostCustomerTransaction([FromBody]CustomerTransaction entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/CustomerTransactions/{customerTransactionId:int}")]
        public IActionResult PutCustomerTransaction(int customerTransactionId, [FromBody] Delta<CustomerTransaction> delta)
        {
            var original = _context.CustomerTransactions.Find(customerTransactionId);
            if (original == null)
            {
                return NotFound($"Not found CustomerTransaction with customerTransactionId = {customerTransactionId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/CustomerTransactions({customerTransactionId:int})")]
        public IActionResult PatchCustomerTransaction(int customerTransactionId, Delta<CustomerTransaction > delta)
        {
            var original = _context.CustomerTransactions.Find(customerTransactionId);

            if (original == null)
            {
                return NotFound($"Not found CustomerTransaction with customerTransactionId = {customerTransactionId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/CustomerTransactions({customerTransactionId:int})")]
        public IActionResult DeleteCustomerTransaction(int customerTransactionId)
        {
            var original = _context.CustomerTransactions.Find(customerTransactionId);

            if (original == null)
            {
                return NotFound($"Not found CustomerTransaction with customerTransactionId = {customerTransactionId}");
            }

            _context.CustomerTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion CustomerTransactions

        #region DeliveryMethods

        [EnableQuery]
        [HttpGet("odata/DeliveryMethods")]
        public IActionResult GetDeliveryMethods()
        {
            return Ok(_context.DeliveryMethods);
        }

        [EnableQuery]
        [HttpGet("odata/DeliveryMethods({deliveryMethodId:int})")]
        public IActionResult GetDeliveryMethods(int deliveryMethodId)
        {
            var entity = _context.DeliveryMethods.Find(deliveryMethodId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/DeliveryMethods")]
        public IActionResult PostDeliveryMethod([FromBody]DeliveryMethod entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/DeliveryMethods/{deliveryMethodId:int}")]
        public IActionResult PutDeliveryMethod(int deliveryMethodId, [FromBody] Delta<DeliveryMethod> delta)
        {
            var original = _context.DeliveryMethods.Find(deliveryMethodId);
            if (original == null)
            {
                return NotFound($"Not found DeliveryMethod with deliveryMethodId = {deliveryMethodId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/DeliveryMethods({deliveryMethodId:int})")]
        public IActionResult PatchDeliveryMethod(int deliveryMethodId, Delta<DeliveryMethod > delta)
        {
            var original = _context.DeliveryMethods.Find(deliveryMethodId);

            if (original == null)
            {
                return NotFound($"Not found DeliveryMethod with deliveryMethodId = {deliveryMethodId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/DeliveryMethods({deliveryMethodId:int})")]
        public IActionResult DeleteDeliveryMethod(int deliveryMethodId)
        {
            var original = _context.DeliveryMethods.Find(deliveryMethodId);

            if (original == null)
            {
                return NotFound($"Not found DeliveryMethod with deliveryMethodId = {deliveryMethodId}");
            }

            _context.DeliveryMethods.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion DeliveryMethods

        #region Invoices

        [EnableQuery]
        [HttpGet("odata/Invoices")]
        public IActionResult GetInvoices()
        {
            return Ok(_context.Invoices);
        }

        [EnableQuery]
        [HttpGet("odata/Invoices({invoiceId:int})")]
        public IActionResult GetInvoices(int invoiceId)
        {
            var entity = _context.Invoices.Find(invoiceId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Invoices")]
        public IActionResult PostInvoice([FromBody]Invoice entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Invoices/{invoiceId:int}")]
        public IActionResult PutInvoice(int invoiceId, [FromBody] Delta<Invoice> delta)
        {
            var original = _context.Invoices.Find(invoiceId);
            if (original == null)
            {
                return NotFound($"Not found Invoice with invoiceId = {invoiceId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Invoices({invoiceId:int})")]
        public IActionResult PatchInvoice(int invoiceId, Delta<Invoice > delta)
        {
            var original = _context.Invoices.Find(invoiceId);

            if (original == null)
            {
                return NotFound($"Not found Invoice with invoiceId = {invoiceId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Invoices({invoiceId:int})")]
        public IActionResult DeleteInvoice(int invoiceId)
        {
            var original = _context.Invoices.Find(invoiceId);

            if (original == null)
            {
                return NotFound($"Not found Invoice with invoiceId = {invoiceId}");
            }

            _context.Invoices.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Invoices

        #region InvoiceLines

        [EnableQuery]
        [HttpGet("odata/InvoiceLines")]
        public IActionResult GetInvoiceLines()
        {
            return Ok(_context.InvoiceLines);
        }

        [EnableQuery]
        [HttpGet("odata/InvoiceLines({invoiceLineId:int})")]
        public IActionResult GetInvoiceLines(int invoiceLineId)
        {
            var entity = _context.InvoiceLines.Find(invoiceLineId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/InvoiceLines")]
        public IActionResult PostInvoiceLine([FromBody]InvoiceLine entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/InvoiceLines/{invoiceLineId:int}")]
        public IActionResult PutInvoiceLine(int invoiceLineId, [FromBody] Delta<InvoiceLine> delta)
        {
            var original = _context.InvoiceLines.Find(invoiceLineId);
            if (original == null)
            {
                return NotFound($"Not found InvoiceLine with invoiceLineId = {invoiceLineId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/InvoiceLines({invoiceLineId:int})")]
        public IActionResult PatchInvoiceLine(int invoiceLineId, Delta<InvoiceLine > delta)
        {
            var original = _context.InvoiceLines.Find(invoiceLineId);

            if (original == null)
            {
                return NotFound($"Not found InvoiceLine with invoiceLineId = {invoiceLineId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/InvoiceLines({invoiceLineId:int})")]
        public IActionResult DeleteInvoiceLine(int invoiceLineId)
        {
            var original = _context.InvoiceLines.Find(invoiceLineId);

            if (original == null)
            {
                return NotFound($"Not found InvoiceLine with invoiceLineId = {invoiceLineId}");
            }

            _context.InvoiceLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion InvoiceLines

        #region Orders

        [EnableQuery]
        [HttpGet("odata/Orders")]
        public IActionResult GetOrders()
        {
            return Ok(_context.Orders);
        }

        [EnableQuery]
        [HttpGet("odata/Orders({orderId:int})")]
        public IActionResult GetOrders(int orderId)
        {
            var entity = _context.Orders.Find(orderId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Orders")]
        public IActionResult PostOrder([FromBody]Order entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Orders/{orderId:int}")]
        public IActionResult PutOrder(int orderId, [FromBody] Delta<Order> delta)
        {
            var original = _context.Orders.Find(orderId);
            if (original == null)
            {
                return NotFound($"Not found Order with orderId = {orderId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Orders({orderId:int})")]
        public IActionResult PatchOrder(int orderId, Delta<Order > delta)
        {
            var original = _context.Orders.Find(orderId);

            if (original == null)
            {
                return NotFound($"Not found Order with orderId = {orderId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Orders({orderId:int})")]
        public IActionResult DeleteOrder(int orderId)
        {
            var original = _context.Orders.Find(orderId);

            if (original == null)
            {
                return NotFound($"Not found Order with orderId = {orderId}");
            }

            _context.Orders.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Orders

        #region OrderLines

        [EnableQuery]
        [HttpGet("odata/OrderLines")]
        public IActionResult GetOrderLines()
        {
            return Ok(_context.OrderLines);
        }

        [EnableQuery]
        [HttpGet("odata/OrderLines({orderLineId:int})")]
        public IActionResult GetOrderLines(int orderLineId)
        {
            var entity = _context.OrderLines.Find(orderLineId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/OrderLines")]
        public IActionResult PostOrderLine([FromBody]OrderLine entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/OrderLines/{orderLineId:int}")]
        public IActionResult PutOrderLine(int orderLineId, [FromBody] Delta<OrderLine> delta)
        {
            var original = _context.OrderLines.Find(orderLineId);
            if (original == null)
            {
                return NotFound($"Not found OrderLine with orderLineId = {orderLineId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/OrderLines({orderLineId:int})")]
        public IActionResult PatchOrderLine(int orderLineId, Delta<OrderLine > delta)
        {
            var original = _context.OrderLines.Find(orderLineId);

            if (original == null)
            {
                return NotFound($"Not found OrderLine with orderLineId = {orderLineId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/OrderLines({orderLineId:int})")]
        public IActionResult DeleteOrderLine(int orderLineId)
        {
            var original = _context.OrderLines.Find(orderLineId);

            if (original == null)
            {
                return NotFound($"Not found OrderLine with orderLineId = {orderLineId}");
            }

            _context.OrderLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion OrderLines

        #region PackageTypes

        [EnableQuery]
        [HttpGet("odata/PackageTypes")]
        public IActionResult GetPackageTypes()
        {
            return Ok(_context.PackageTypes);
        }

        [EnableQuery]
        [HttpGet("odata/PackageTypes({packageTypeId:int})")]
        public IActionResult GetPackageTypes(int packageTypeId)
        {
            var entity = _context.PackageTypes.Find(packageTypeId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/PackageTypes")]
        public IActionResult PostPackageType([FromBody]PackageType entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PackageTypes/{packageTypeId:int}")]
        public IActionResult PutPackageType(int packageTypeId, [FromBody] Delta<PackageType> delta)
        {
            var original = _context.PackageTypes.Find(packageTypeId);
            if (original == null)
            {
                return NotFound($"Not found PackageType with packageTypeId = {packageTypeId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/PackageTypes({packageTypeId:int})")]
        public IActionResult PatchPackageType(int packageTypeId, Delta<PackageType > delta)
        {
            var original = _context.PackageTypes.Find(packageTypeId);

            if (original == null)
            {
                return NotFound($"Not found PackageType with packageTypeId = {packageTypeId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PackageTypes({packageTypeId:int})")]
        public IActionResult DeletePackageType(int packageTypeId)
        {
            var original = _context.PackageTypes.Find(packageTypeId);

            if (original == null)
            {
                return NotFound($"Not found PackageType with packageTypeId = {packageTypeId}");
            }

            _context.PackageTypes.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PackageTypes

        #region PaymentMethods

        [EnableQuery]
        [HttpGet("odata/PaymentMethods")]
        public IActionResult GetPaymentMethods()
        {
            return Ok(_context.PaymentMethods);
        }

        [EnableQuery]
        [HttpGet("odata/PaymentMethods({paymentMethodId:int})")]
        public IActionResult GetPaymentMethods(int paymentMethodId)
        {
            var entity = _context.PaymentMethods.Find(paymentMethodId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/PaymentMethods")]
        public IActionResult PostPaymentMethod([FromBody]PaymentMethod entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PaymentMethods/{paymentMethodId:int}")]
        public IActionResult PutPaymentMethod(int paymentMethodId, [FromBody] Delta<PaymentMethod> delta)
        {
            var original = _context.PaymentMethods.Find(paymentMethodId);
            if (original == null)
            {
                return NotFound($"Not found PaymentMethod with paymentMethodId = {paymentMethodId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/PaymentMethods({paymentMethodId:int})")]
        public IActionResult PatchPaymentMethod(int paymentMethodId, Delta<PaymentMethod > delta)
        {
            var original = _context.PaymentMethods.Find(paymentMethodId);

            if (original == null)
            {
                return NotFound($"Not found PaymentMethod with paymentMethodId = {paymentMethodId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PaymentMethods({paymentMethodId:int})")]
        public IActionResult DeletePaymentMethod(int paymentMethodId)
        {
            var original = _context.PaymentMethods.Find(paymentMethodId);

            if (original == null)
            {
                return NotFound($"Not found PaymentMethod with paymentMethodId = {paymentMethodId}");
            }

            _context.PaymentMethods.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PaymentMethods

        #region People

        [EnableQuery]
        [HttpGet("odata/People")]
        public IActionResult GetPeople()
        {
            return Ok(_context.People);
        }

        [EnableQuery]
        [HttpGet("odata/People({personId:int})")]
        public IActionResult GetPeople(int personId)
        {
            var entity = _context.People.Find(personId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/People")]
        public IActionResult PostPerson([FromBody]Person entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/People/{personId:int}")]
        public IActionResult PutPerson(int personId, [FromBody] Delta<Person> delta)
        {
            var original = _context.People.Find(personId);
            if (original == null)
            {
                return NotFound($"Not found Person with personId = {personId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/People({personId:int})")]
        public IActionResult PatchPerson(int personId, Delta<Person > delta)
        {
            var original = _context.People.Find(personId);

            if (original == null)
            {
                return NotFound($"Not found Person with personId = {personId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/People({personId:int})")]
        public IActionResult DeletePerson(int personId)
        {
            var original = _context.People.Find(personId);

            if (original == null)
            {
                return NotFound($"Not found Person with personId = {personId}");
            }

            _context.People.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion People

        #region PurchaseOrders

        [EnableQuery]
        [HttpGet("odata/PurchaseOrders")]
        public IActionResult GetPurchaseOrders()
        {
            return Ok(_context.PurchaseOrders);
        }

        [EnableQuery]
        [HttpGet("odata/PurchaseOrders({purchaseOrderId:int})")]
        public IActionResult GetPurchaseOrders(int purchaseOrderId)
        {
            var entity = _context.PurchaseOrders.Find(purchaseOrderId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/PurchaseOrders")]
        public IActionResult PostPurchaseOrder([FromBody]PurchaseOrder entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PurchaseOrders/{purchaseOrderId:int}")]
        public IActionResult PutPurchaseOrder(int purchaseOrderId, [FromBody] Delta<PurchaseOrder> delta)
        {
            var original = _context.PurchaseOrders.Find(purchaseOrderId);
            if (original == null)
            {
                return NotFound($"Not found PurchaseOrder with purchaseOrderId = {purchaseOrderId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/PurchaseOrders({purchaseOrderId:int})")]
        public IActionResult PatchPurchaseOrder(int purchaseOrderId, Delta<PurchaseOrder > delta)
        {
            var original = _context.PurchaseOrders.Find(purchaseOrderId);

            if (original == null)
            {
                return NotFound($"Not found PurchaseOrder with purchaseOrderId = {purchaseOrderId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PurchaseOrders({purchaseOrderId:int})")]
        public IActionResult DeletePurchaseOrder(int purchaseOrderId)
        {
            var original = _context.PurchaseOrders.Find(purchaseOrderId);

            if (original == null)
            {
                return NotFound($"Not found PurchaseOrder with purchaseOrderId = {purchaseOrderId}");
            }

            _context.PurchaseOrders.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PurchaseOrders

        #region PurchaseOrderLines

        [EnableQuery]
        [HttpGet("odata/PurchaseOrderLines")]
        public IActionResult GetPurchaseOrderLines()
        {
            return Ok(_context.PurchaseOrderLines);
        }

        [EnableQuery]
        [HttpGet("odata/PurchaseOrderLines({purchaseOrderLineId:int})")]
        public IActionResult GetPurchaseOrderLines(int purchaseOrderLineId)
        {
            var entity = _context.PurchaseOrderLines.Find(purchaseOrderLineId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/PurchaseOrderLines")]
        public IActionResult PostPurchaseOrderLine([FromBody]PurchaseOrderLine entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/PurchaseOrderLines/{purchaseOrderLineId:int}")]
        public IActionResult PutPurchaseOrderLine(int purchaseOrderLineId, [FromBody] Delta<PurchaseOrderLine> delta)
        {
            var original = _context.PurchaseOrderLines.Find(purchaseOrderLineId);
            if (original == null)
            {
                return NotFound($"Not found PurchaseOrderLine with purchaseOrderLineId = {purchaseOrderLineId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/PurchaseOrderLines({purchaseOrderLineId:int})")]
        public IActionResult PatchPurchaseOrderLine(int purchaseOrderLineId, Delta<PurchaseOrderLine > delta)
        {
            var original = _context.PurchaseOrderLines.Find(purchaseOrderLineId);

            if (original == null)
            {
                return NotFound($"Not found PurchaseOrderLine with purchaseOrderLineId = {purchaseOrderLineId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/PurchaseOrderLines({purchaseOrderLineId:int})")]
        public IActionResult DeletePurchaseOrderLine(int purchaseOrderLineId)
        {
            var original = _context.PurchaseOrderLines.Find(purchaseOrderLineId);

            if (original == null)
            {
                return NotFound($"Not found PurchaseOrderLine with purchaseOrderLineId = {purchaseOrderLineId}");
            }

            _context.PurchaseOrderLines.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion PurchaseOrderLines

        #region SpecialDeals

        [EnableQuery]
        [HttpGet("odata/SpecialDeals")]
        public IActionResult GetSpecialDeals()
        {
            return Ok(_context.SpecialDeals);
        }

        [EnableQuery]
        [HttpGet("odata/SpecialDeals({specialDealId:int})")]
        public IActionResult GetSpecialDeals(int specialDealId)
        {
            var entity = _context.SpecialDeals.Find(specialDealId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/SpecialDeals")]
        public IActionResult PostSpecialDeal([FromBody]SpecialDeal entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SpecialDeals/{specialDealId:int}")]
        public IActionResult PutSpecialDeal(int specialDealId, [FromBody] Delta<SpecialDeal> delta)
        {
            var original = _context.SpecialDeals.Find(specialDealId);
            if (original == null)
            {
                return NotFound($"Not found SpecialDeal with specialDealId = {specialDealId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/SpecialDeals({specialDealId:int})")]
        public IActionResult PatchSpecialDeal(int specialDealId, Delta<SpecialDeal > delta)
        {
            var original = _context.SpecialDeals.Find(specialDealId);

            if (original == null)
            {
                return NotFound($"Not found SpecialDeal with specialDealId = {specialDealId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SpecialDeals({specialDealId:int})")]
        public IActionResult DeleteSpecialDeal(int specialDealId)
        {
            var original = _context.SpecialDeals.Find(specialDealId);

            if (original == null)
            {
                return NotFound($"Not found SpecialDeal with specialDealId = {specialDealId}");
            }

            _context.SpecialDeals.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SpecialDeals

        #region StateProvinces

        [EnableQuery]
        [HttpGet("odata/StateProvinces")]
        public IActionResult GetStateProvinces()
        {
            return Ok(_context.StateProvinces);
        }

        [EnableQuery]
        [HttpGet("odata/StateProvinces({stateProvinceId:int})")]
        public IActionResult GetStateProvinces(int stateProvinceId)
        {
            var entity = _context.StateProvinces.Find(stateProvinceId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StateProvinces")]
        public IActionResult PostStateProvince([FromBody]StateProvince entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StateProvinces/{stateProvinceId:int}")]
        public IActionResult PutStateProvince(int stateProvinceId, [FromBody] Delta<StateProvince> delta)
        {
            var original = _context.StateProvinces.Find(stateProvinceId);
            if (original == null)
            {
                return NotFound($"Not found StateProvince with stateProvinceId = {stateProvinceId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StateProvinces({stateProvinceId:int})")]
        public IActionResult PatchStateProvince(int stateProvinceId, Delta<StateProvince > delta)
        {
            var original = _context.StateProvinces.Find(stateProvinceId);

            if (original == null)
            {
                return NotFound($"Not found StateProvince with stateProvinceId = {stateProvinceId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StateProvinces({stateProvinceId:int})")]
        public IActionResult DeleteStateProvince(int stateProvinceId)
        {
            var original = _context.StateProvinces.Find(stateProvinceId);

            if (original == null)
            {
                return NotFound($"Not found StateProvince with stateProvinceId = {stateProvinceId}");
            }

            _context.StateProvinces.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StateProvinces

        #region StockGroups

        [EnableQuery]
        [HttpGet("odata/StockGroups")]
        public IActionResult GetStockGroups()
        {
            return Ok(_context.StockGroups);
        }

        [EnableQuery]
        [HttpGet("odata/StockGroups({stockGroupId:int})")]
        public IActionResult GetStockGroups(int stockGroupId)
        {
            var entity = _context.StockGroups.Find(stockGroupId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StockGroups")]
        public IActionResult PostStockGroup([FromBody]StockGroup entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockGroups/{stockGroupId:int}")]
        public IActionResult PutStockGroup(int stockGroupId, [FromBody] Delta<StockGroup> delta)
        {
            var original = _context.StockGroups.Find(stockGroupId);
            if (original == null)
            {
                return NotFound($"Not found StockGroup with stockGroupId = {stockGroupId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StockGroups({stockGroupId:int})")]
        public IActionResult PatchStockGroup(int stockGroupId, Delta<StockGroup > delta)
        {
            var original = _context.StockGroups.Find(stockGroupId);

            if (original == null)
            {
                return NotFound($"Not found StockGroup with stockGroupId = {stockGroupId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockGroups({stockGroupId:int})")]
        public IActionResult DeleteStockGroup(int stockGroupId)
        {
            var original = _context.StockGroups.Find(stockGroupId);

            if (original == null)
            {
                return NotFound($"Not found StockGroup with stockGroupId = {stockGroupId}");
            }

            _context.StockGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockGroups

        #region StockItems

        [EnableQuery]
        [HttpGet("odata/StockItems")]
        public IActionResult GetStockItems()
        {
            return Ok(_context.StockItems);
        }

        [EnableQuery]
        [HttpGet("odata/StockItems({stockItemId:int})")]
        public IActionResult GetStockItems(int stockItemId)
        {
            var entity = _context.StockItems.Find(stockItemId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StockItems")]
        public IActionResult PostStockItem([FromBody]StockItem entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItems/{stockItemId:int}")]
        public IActionResult PutStockItem(int stockItemId, [FromBody] Delta<StockItem> delta)
        {
            var original = _context.StockItems.Find(stockItemId);
            if (original == null)
            {
                return NotFound($"Not found StockItem with stockItemId = {stockItemId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StockItems({stockItemId:int})")]
        public IActionResult PatchStockItem(int stockItemId, Delta<StockItem > delta)
        {
            var original = _context.StockItems.Find(stockItemId);

            if (original == null)
            {
                return NotFound($"Not found StockItem with stockItemId = {stockItemId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItems({stockItemId:int})")]
        public IActionResult DeleteStockItem(int stockItemId)
        {
            var original = _context.StockItems.Find(stockItemId);

            if (original == null)
            {
                return NotFound($"Not found StockItem with stockItemId = {stockItemId}");
            }

            _context.StockItems.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItems

        #region StockItemHoldings

        [EnableQuery]
        [HttpGet("odata/StockItemHoldings")]
        public IActionResult GetStockItemHoldings()
        {
            return Ok(_context.StockItemHoldings);
        }

        [EnableQuery]
        [HttpGet("odata/StockItemHoldings({stockItemId:int})")]
        public IActionResult GetStockItemHoldings(int stockItemId)
        {
            var entity = _context.StockItemHoldings.Find(stockItemId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StockItemHoldings")]
        public IActionResult PostStockItemHolding([FromBody]StockItemHolding entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItemHoldings/{stockItemId:int}")]
        public IActionResult PutStockItemHolding(int stockItemId, [FromBody] Delta<StockItemHolding> delta)
        {
            var original = _context.StockItemHoldings.Find(stockItemId);
            if (original == null)
            {
                return NotFound($"Not found StockItemHolding with stockItemId = {stockItemId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StockItemHoldings({stockItemId:int})")]
        public IActionResult PatchStockItemHolding(int stockItemId, Delta<StockItemHolding > delta)
        {
            var original = _context.StockItemHoldings.Find(stockItemId);

            if (original == null)
            {
                return NotFound($"Not found StockItemHolding with stockItemId = {stockItemId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItemHoldings({stockItemId:int})")]
        public IActionResult DeleteStockItemHolding(int stockItemId)
        {
            var original = _context.StockItemHoldings.Find(stockItemId);

            if (original == null)
            {
                return NotFound($"Not found StockItemHolding with stockItemId = {stockItemId}");
            }

            _context.StockItemHoldings.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItemHoldings

        #region StockItemStockGroups

        [EnableQuery]
        [HttpGet("odata/StockItemStockGroups")]
        public IActionResult GetStockItemStockGroups()
        {
            return Ok(_context.StockItemStockGroups);
        }

        [EnableQuery]
        [HttpGet("odata/StockItemStockGroups({stockItemStockGroupId:int})")]
        public IActionResult GetStockItemStockGroups(int stockItemStockGroupId)
        {
            var entity = _context.StockItemStockGroups.Find(stockItemStockGroupId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StockItemStockGroups")]
        public IActionResult PostStockItemStockGroup([FromBody]StockItemStockGroup entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItemStockGroups/{stockItemStockGroupId:int}")]
        public IActionResult PutStockItemStockGroup(int stockItemStockGroupId, [FromBody] Delta<StockItemStockGroup> delta)
        {
            var original = _context.StockItemStockGroups.Find(stockItemStockGroupId);
            if (original == null)
            {
                return NotFound($"Not found StockItemStockGroup with stockItemStockGroupId = {stockItemStockGroupId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StockItemStockGroups({stockItemStockGroupId:int})")]
        public IActionResult PatchStockItemStockGroup(int stockItemStockGroupId, Delta<StockItemStockGroup > delta)
        {
            var original = _context.StockItemStockGroups.Find(stockItemStockGroupId);

            if (original == null)
            {
                return NotFound($"Not found StockItemStockGroup with stockItemStockGroupId = {stockItemStockGroupId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItemStockGroups({stockItemStockGroupId:int})")]
        public IActionResult DeleteStockItemStockGroup(int stockItemStockGroupId)
        {
            var original = _context.StockItemStockGroups.Find(stockItemStockGroupId);

            if (original == null)
            {
                return NotFound($"Not found StockItemStockGroup with stockItemStockGroupId = {stockItemStockGroupId}");
            }

            _context.StockItemStockGroups.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItemStockGroups

        #region StockItemTransactions

        [EnableQuery]
        [HttpGet("odata/StockItemTransactions")]
        public IActionResult GetStockItemTransactions()
        {
            return Ok(_context.StockItemTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/StockItemTransactions({stockItemTransactionId:int})")]
        public IActionResult GetStockItemTransactions(int stockItemTransactionId)
        {
            var entity = _context.StockItemTransactions.Find(stockItemTransactionId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/StockItemTransactions")]
        public IActionResult PostStockItemTransaction([FromBody]StockItemTransaction entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/StockItemTransactions/{stockItemTransactionId:int}")]
        public IActionResult PutStockItemTransaction(int stockItemTransactionId, [FromBody] Delta<StockItemTransaction> delta)
        {
            var original = _context.StockItemTransactions.Find(stockItemTransactionId);
            if (original == null)
            {
                return NotFound($"Not found StockItemTransaction with stockItemTransactionId = {stockItemTransactionId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/StockItemTransactions({stockItemTransactionId:int})")]
        public IActionResult PatchStockItemTransaction(int stockItemTransactionId, Delta<StockItemTransaction > delta)
        {
            var original = _context.StockItemTransactions.Find(stockItemTransactionId);

            if (original == null)
            {
                return NotFound($"Not found StockItemTransaction with stockItemTransactionId = {stockItemTransactionId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/StockItemTransactions({stockItemTransactionId:int})")]
        public IActionResult DeleteStockItemTransaction(int stockItemTransactionId)
        {
            var original = _context.StockItemTransactions.Find(stockItemTransactionId);

            if (original == null)
            {
                return NotFound($"Not found StockItemTransaction with stockItemTransactionId = {stockItemTransactionId}");
            }

            _context.StockItemTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion StockItemTransactions

        #region Suppliers

        [EnableQuery]
        [HttpGet("odata/Suppliers")]
        public IActionResult GetSuppliers()
        {
            return Ok(_context.Suppliers);
        }

        [EnableQuery]
        [HttpGet("odata/Suppliers({supplierId:int})")]
        public IActionResult GetSuppliers(int supplierId)
        {
            var entity = _context.Suppliers.Find(supplierId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/Suppliers")]
        public IActionResult PostSupplier([FromBody]Supplier entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/Suppliers/{supplierId:int}")]
        public IActionResult PutSupplier(int supplierId, [FromBody] Delta<Supplier> delta)
        {
            var original = _context.Suppliers.Find(supplierId);
            if (original == null)
            {
                return NotFound($"Not found Supplier with supplierId = {supplierId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/Suppliers({supplierId:int})")]
        public IActionResult PatchSupplier(int supplierId, Delta<Supplier > delta)
        {
            var original = _context.Suppliers.Find(supplierId);

            if (original == null)
            {
                return NotFound($"Not found Supplier with supplierId = {supplierId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/Suppliers({supplierId:int})")]
        public IActionResult DeleteSupplier(int supplierId)
        {
            var original = _context.Suppliers.Find(supplierId);

            if (original == null)
            {
                return NotFound($"Not found Supplier with supplierId = {supplierId}");
            }

            _context.Suppliers.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion Suppliers

        #region SupplierCategories

        [EnableQuery]
        [HttpGet("odata/SupplierCategories")]
        public IActionResult GetSupplierCategories()
        {
            return Ok(_context.SupplierCategories);
        }

        [EnableQuery]
        [HttpGet("odata/SupplierCategories({supplierCategoryId:int})")]
        public IActionResult GetSupplierCategories(int supplierCategoryId)
        {
            var entity = _context.SupplierCategories.Find(supplierCategoryId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/SupplierCategories")]
        public IActionResult PostSupplierCategory([FromBody]SupplierCategory entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SupplierCategories/{supplierCategoryId:int}")]
        public IActionResult PutSupplierCategory(int supplierCategoryId, [FromBody] Delta<SupplierCategory> delta)
        {
            var original = _context.SupplierCategories.Find(supplierCategoryId);
            if (original == null)
            {
                return NotFound($"Not found SupplierCategory with supplierCategoryId = {supplierCategoryId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/SupplierCategories({supplierCategoryId:int})")]
        public IActionResult PatchSupplierCategory(int supplierCategoryId, Delta<SupplierCategory > delta)
        {
            var original = _context.SupplierCategories.Find(supplierCategoryId);

            if (original == null)
            {
                return NotFound($"Not found SupplierCategory with supplierCategoryId = {supplierCategoryId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SupplierCategories({supplierCategoryId:int})")]
        public IActionResult DeleteSupplierCategory(int supplierCategoryId)
        {
            var original = _context.SupplierCategories.Find(supplierCategoryId);

            if (original == null)
            {
                return NotFound($"Not found SupplierCategory with supplierCategoryId = {supplierCategoryId}");
            }

            _context.SupplierCategories.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SupplierCategories

        #region SupplierTransactions

        [EnableQuery]
        [HttpGet("odata/SupplierTransactions")]
        public IActionResult GetSupplierTransactions()
        {
            return Ok(_context.SupplierTransactions);
        }

        [EnableQuery]
        [HttpGet("odata/SupplierTransactions({supplierTransactionId:int})")]
        public IActionResult GetSupplierTransactions(int supplierTransactionId)
        {
            var entity = _context.SupplierTransactions.Find(supplierTransactionId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/SupplierTransactions")]
        public IActionResult PostSupplierTransaction([FromBody]SupplierTransaction entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SupplierTransactions/{supplierTransactionId:int}")]
        public IActionResult PutSupplierTransaction(int supplierTransactionId, [FromBody] Delta<SupplierTransaction> delta)
        {
            var original = _context.SupplierTransactions.Find(supplierTransactionId);
            if (original == null)
            {
                return NotFound($"Not found SupplierTransaction with supplierTransactionId = {supplierTransactionId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/SupplierTransactions({supplierTransactionId:int})")]
        public IActionResult PatchSupplierTransaction(int supplierTransactionId, Delta<SupplierTransaction > delta)
        {
            var original = _context.SupplierTransactions.Find(supplierTransactionId);

            if (original == null)
            {
                return NotFound($"Not found SupplierTransaction with supplierTransactionId = {supplierTransactionId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SupplierTransactions({supplierTransactionId:int})")]
        public IActionResult DeleteSupplierTransaction(int supplierTransactionId)
        {
            var original = _context.SupplierTransactions.Find(supplierTransactionId);

            if (original == null)
            {
                return NotFound($"Not found SupplierTransaction with supplierTransactionId = {supplierTransactionId}");
            }

            _context.SupplierTransactions.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SupplierTransactions

        #region SystemParameters

        [EnableQuery]
        [HttpGet("odata/SystemParameters")]
        public IActionResult GetSystemParameters()
        {
            return Ok(_context.SystemParameters);
        }

        [EnableQuery]
        [HttpGet("odata/SystemParameters({systemParameterId:int})")]
        public IActionResult GetSystemParameters(int systemParameterId)
        {
            var entity = _context.SystemParameters.Find(systemParameterId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/SystemParameters")]
        public IActionResult PostSystemParameter([FromBody]SystemParameter entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/SystemParameters/{systemParameterId:int}")]
        public IActionResult PutSystemParameter(int systemParameterId, [FromBody] Delta<SystemParameter> delta)
        {
            var original = _context.SystemParameters.Find(systemParameterId);
            if (original == null)
            {
                return NotFound($"Not found SystemParameter with systemParameterId = {systemParameterId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/SystemParameters({systemParameterId:int})")]
        public IActionResult PatchSystemParameter(int systemParameterId, Delta<SystemParameter > delta)
        {
            var original = _context.SystemParameters.Find(systemParameterId);

            if (original == null)
            {
                return NotFound($"Not found SystemParameter with systemParameterId = {systemParameterId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/SystemParameters({systemParameterId:int})")]
        public IActionResult DeleteSystemParameter(int systemParameterId)
        {
            var original = _context.SystemParameters.Find(systemParameterId);

            if (original == null)
            {
                return NotFound($"Not found SystemParameter with systemParameterId = {systemParameterId}");
            }

            _context.SystemParameters.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion SystemParameters

        #region TransactionTypes

        [EnableQuery]
        [HttpGet("odata/TransactionTypes")]
        public IActionResult GetTransactionTypes()
        {
            return Ok(_context.TransactionTypes);
        }

        [EnableQuery]
        [HttpGet("odata/TransactionTypes({transactionTypeId:int})")]
        public IActionResult GetTransactionTypes(int transactionTypeId)
        {
            var entity = _context.TransactionTypes.Find(transactionTypeId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/TransactionTypes")]
        public IActionResult PostTransactionType([FromBody]TransactionType entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/TransactionTypes/{transactionTypeId:int}")]
        public IActionResult PutTransactionType(int transactionTypeId, [FromBody] Delta<TransactionType> delta)
        {
            var original = _context.TransactionTypes.Find(transactionTypeId);
            if (original == null)
            {
                return NotFound($"Not found TransactionType with transactionTypeId = {transactionTypeId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/TransactionTypes({transactionTypeId:int})")]
        public IActionResult PatchTransactionType(int transactionTypeId, Delta<TransactionType > delta)
        {
            var original = _context.TransactionTypes.Find(transactionTypeId);

            if (original == null)
            {
                return NotFound($"Not found TransactionType with transactionTypeId = {transactionTypeId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/TransactionTypes({transactionTypeId:int})")]
        public IActionResult DeleteTransactionType(int transactionTypeId)
        {
            var original = _context.TransactionTypes.Find(transactionTypeId);

            if (original == null)
            {
                return NotFound($"Not found TransactionType with transactionTypeId = {transactionTypeId}");
            }

            _context.TransactionTypes.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion TransactionTypes

        #region VehicleTemperatures

        [EnableQuery]
        [HttpGet("odata/VehicleTemperatures")]
        public IActionResult GetVehicleTemperatures()
        {
            return Ok(_context.VehicleTemperatures);
        }

        [EnableQuery]
        [HttpGet("odata/VehicleTemperatures({vehicleTemperatureId:int})")]
        public IActionResult GetVehicleTemperatures(int vehicleTemperatureId)
        {
            var entity = _context.VehicleTemperatures.Find(vehicleTemperatureId);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/VehicleTemperatures")]
        public IActionResult PostVehicleTemperature([FromBody]VehicleTemperature entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/VehicleTemperatures/{vehicleTemperatureId:int}")]
        public IActionResult PutVehicleTemperature(int vehicleTemperatureId, [FromBody] Delta<VehicleTemperature> delta)
        {
            var original = _context.VehicleTemperatures.Find(vehicleTemperatureId);
            if (original == null)
            {
                return NotFound($"Not found VehicleTemperature with vehicleTemperatureId = {vehicleTemperatureId}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/VehicleTemperatures({vehicleTemperatureId:int})")]
        public IActionResult PatchVehicleTemperature(int vehicleTemperatureId, Delta<VehicleTemperature > delta)
        {
            var original = _context.VehicleTemperatures.Find(vehicleTemperatureId);

            if (original == null)
            {
                return NotFound($"Not found VehicleTemperature with vehicleTemperatureId = {vehicleTemperatureId}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/VehicleTemperatures({vehicleTemperatureId:int})")]
        public IActionResult DeleteVehicleTemperature(int vehicleTemperatureId)
        {
            var original = _context.VehicleTemperatures.Find(vehicleTemperatureId);

            if (original == null)
            {
                return NotFound($"Not found VehicleTemperature with vehicleTemperatureId = {vehicleTemperatureId}");
            }

            _context.VehicleTemperatures.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion VehicleTemperatures

    }
}

