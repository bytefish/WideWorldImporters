<#@ output extension=".cs"#>
<#@ template language="C#" hostspecific="True" #>
<#
    var entitySets = new EntitySet[] 
    {
        new EntitySet("BuyingGroups", "BuyingGroup", "buyingGroupsId", "int"),
        new EntitySet("Cities", "City", "cityId", "int"),
        new EntitySet("ColdRoomTemperatures", "ColdRoomTemperature", "coldRoomTemperatureId", "long"),
        new EntitySet("Colors", "Color", "colorId", "int"),
        new EntitySet("Countries", "Country", "countryId", "int"),
        new EntitySet("Customers", "Customer", "customerId", "int"),
        new EntitySet("CustomerCategories", "CustomerCategory", "customerCategoryId", "int"),
        new EntitySet("CustomerTransactions", "CustomerTransaction", "customerTransactionId", "int"),
        new EntitySet("DeliveryMethods", "DeliveryMethod", "deliveryMethodId", "int"),
        new EntitySet("Invoices", "Invoice", "invoiceId", "int"),
        new EntitySet("InvoiceLines", "InvoiceLine", "invoiceLineId", "int"),
        new EntitySet("Orders", "Order", "orderId", "int"),
        new EntitySet("OrderLines", "OrderLine", "orderLineId", "int"),
        new EntitySet("PackageTypes", "PackageType", "packageTypeId", "int"),
        new EntitySet("PaymentMethods", "PaymentMethod", "paymentMethodId", "int"),
        new EntitySet("People", "Person", "personId", "int"),
        new EntitySet("PurchaseOrders", "PurchaseOrder", "purchaseOrderId", "int"),
        new EntitySet("PurchaseOrderLines", "PurchaseOrderLine", "purchaseOrderLineId", "int"),
        new EntitySet("SpecialDeals", "SpecialDeal", "specialDealId", "int"),
        new EntitySet("StateProvinces", "StateProvince", "stateProvinceId", "int"),
        new EntitySet("StockGroups", "StockGroup", "stockGroupId", "int"),
        new EntitySet("StockItems", "StockItem", "stockItemId", "int"),
        new EntitySet("StockItemHoldings", "StockItemHolding", "stockItemId", "int"),
        new EntitySet("StockItemStockGroups", "StockItemStockGroup", "stockItemStockGroupId", "int"),
        new EntitySet("StockItemTransactions", "StockItemTransaction", "stockItemTransactionId", "int"),
        new EntitySet("Suppliers", "Supplier", "supplierId", "int"),
        new EntitySet("SupplierCategories", "SupplierCategory", "supplierCategoryId", "int"),
        new EntitySet("SupplierTransactions", "SupplierTransaction", "supplierTransactionId", "int"),
        new EntitySet("SystemParameters", "SystemParameter", "systemParameterId", "int"),
        new EntitySet("TransactionTypes", "TransactionType", "transactionTypeId", "int"),
        new EntitySet("VehicleTemperatures", "VehicleTemperature", "vehicleTemperatureId", "int"),
    };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using Microsoft.OpenApi.OData;
using Microsoft.OpenApi.Extensions;
using Microsoft.OpenApi;
using WideWorldImporters.Api.Models;
using WideWorldImporters.Database;
using WideWorldImporters.Database.Models;

namespace WideWorldImporters.Api.Controllers
{
    public partial class EntitiesController : ODataController
    {
        private readonly WideWorldImportersContext _context;

        public EntitiesController(WideWorldImportersContext context)
        {
            _context = context;
        }

        #region Swagger Endpoint
        
        [HttpGet("odata/swagger.json")]
        public IActionResult GetSwaggerDocument()
        {
            var edmModel = ApplicationEdmModel.GetEdmModel();

            // Convert to OpenApi:
            var openApiSettings = new OpenApiConvertSettings
            {
                ServiceRoot = new("http://localhost:5000"),
                PathPrefix = "odata",
                EnableKeyAsSegment = true,
            };

            var openApiDocument = edmModel
                .ConvertToOpenApi(openApiSettings)
                .SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);

            return Content(openApiDocument, "application/json");
        }

        #endregion Swagger Endpoint

<# foreach(var entitySet in entitySets) { #>
        #region <#= entitySet.EntitySetName #>

        [EnableQuery]
        [HttpGet("odata/<#= entitySet.EntitySetName #>")]
        public IActionResult Get<#= entitySet.EntitySetName #>()
        {
            return Ok(_context.<#= entitySet.EntitySetName #>);
        }

        [EnableQuery]
        [HttpGet("odata/<#= entitySet.EntitySetName #>({<#= entitySet.EntityKeyName #>:<#= entitySet.EntityKeyType #>})")]
        public IActionResult Get<#= entitySet.EntitySetName #>(<#= entitySet.EntityKeyType #> <#= entitySet.EntityKeyName #>)
        {
            var entity = _context.<#= entitySet.EntitySetName #>.Find(<#= entitySet.EntityKeyName #>);

            if (entity == null)
            {
                return NotFound();
            }

            return Ok(entity);
        }

        [HttpPost("odata/<#= entitySet.EntitySetName #>")]
        public IActionResult Post<#= entitySet.EntityName #>([FromBody]<#= entitySet.EntityName #> entity, CancellationToken token)
        {
            _context.Add(entity);
            _context.SaveChanges();

            return Created(entity);
        }

        [HttpPut("odata/<#= entitySet.EntitySetName #>/{<#= entitySet.EntityKeyName #>:<#= entitySet.EntityKeyType #>}")]
        public IActionResult Put<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> <#= entitySet.EntityKeyName #>, [FromBody] Delta<<#= entitySet.EntityName #>> delta)
        {
            var original = _context.<#= entitySet.EntitySetName #>.Find(<#= entitySet.EntityKeyName #>);
            if (original == null)
            {
                return NotFound($"Not found <#= entitySet.EntityName #> with <#= entitySet.EntityKeyName #> = {<#= entitySet.EntityKeyName #>}");
            }

            delta.Put(original);
            _context.SaveChanges();
            return Updated(original);
        }

        [HttpPatch("odata/<#= entitySet.EntitySetName #>({<#= entitySet.EntityKeyName #>:<#= entitySet.EntityKeyType #>})")]
        public IActionResult Patch<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> <#= entitySet.EntityKeyName #>, Delta<<#= entitySet.EntityName #> > delta)
        {
            var original = _context.<#= entitySet.EntitySetName #>.Find(<#= entitySet.EntityKeyName #>);

            if (original == null)
            {
                return NotFound($"Not found <#= entitySet.EntityName #> with <#= entitySet.EntityKeyName #> = {<#= entitySet.EntityKeyName #>}");
            }

            delta.Patch(original);

            _context.SaveChanges();

            return Updated(original);
        }

        [HttpDelete("odata/<#= entitySet.EntitySetName #>({<#= entitySet.EntityKeyName #>:<#= entitySet.EntityKeyType #>})")]
        public IActionResult Delete<#= entitySet.EntityName #>(<#= entitySet.EntityKeyType #> <#= entitySet.EntityKeyName #>)
        {
            var original = _context.<#= entitySet.EntitySetName #>.Find(<#= entitySet.EntityKeyName #>);

            if (original == null)
            {
                return NotFound($"Not found <#= entitySet.EntityName #> with <#= entitySet.EntityKeyName #> = {<#= entitySet.EntityKeyName #>}");
            }

            _context.<#= entitySet.EntitySetName #>.Remove(original);
            _context.SaveChanges();
            return Ok();
        }


        #endregion <#= entitySet.EntitySetName #>

<# } #>
    }
}

<#+
	public class EntitySet 
    {
        public readonly string EntityName;
        public readonly string EntityKeyName;
        public readonly string EntityKeyType;
        public readonly string EntitySetName;
        
        public EntitySet (string entitySetName, string entityName, string entityKeyName, string entityKeyType) 
        {
            EntitySetName = entitySetName;
            EntityName = entityName;
            EntityKeyName = entityKeyName;
            EntityKeyType = entityKeyType;
        }
    } 
#>